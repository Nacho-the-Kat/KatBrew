/*
 * This file is generated by jOOQ.
 */
package com.nacho.entities.jooq.db.tables;


import com.nacho.entities.jooq.db.Keys;
import com.nacho.entities.jooq.db.Public;
import com.nacho.entities.jooq.db.tables.records.LastupdateRecord;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Lastupdate extends TableImpl<LastupdateRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.LastUpdate</code>
     */
    public static final Lastupdate LASTUPDATE = new Lastupdate();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LastupdateRecord> getRecordType() {
        return LastupdateRecord.class;
    }

    /**
     * The column <code>public.LastUpdate.id</code>.
     */
    public final TableField<LastupdateRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("1"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.LastUpdate.timestamp</code>.
     */
    public final TableField<LastupdateRecord, LocalDateTime> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.LOCALDATETIME(3).nullable(false), this, "");

    private Lastupdate(Name alias, Table<LastupdateRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Lastupdate(Name alias, Table<LastupdateRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.LastUpdate</code> table reference
     */
    public Lastupdate(String alias) {
        this(DSL.name(alias), LASTUPDATE);
    }

    /**
     * Create an aliased <code>public.LastUpdate</code> table reference
     */
    public Lastupdate(Name alias) {
        this(alias, LASTUPDATE);
    }

    /**
     * Create a <code>public.LastUpdate</code> table reference
     */
    public Lastupdate() {
        this(DSL.name("LastUpdate"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<LastupdateRecord> getPrimaryKey() {
        return Keys.LASTUPDATE_PKEY;
    }

    @Override
    public Lastupdate as(String alias) {
        return new Lastupdate(DSL.name(alias), this);
    }

    @Override
    public Lastupdate as(Name alias) {
        return new Lastupdate(alias, this);
    }

    @Override
    public Lastupdate as(Table<?> alias) {
        return new Lastupdate(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Lastupdate rename(String name) {
        return new Lastupdate(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Lastupdate rename(Name name) {
        return new Lastupdate(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Lastupdate rename(Table<?> name) {
        return new Lastupdate(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Lastupdate where(Condition condition) {
        return new Lastupdate(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Lastupdate where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Lastupdate where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Lastupdate where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Lastupdate where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Lastupdate where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Lastupdate where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Lastupdate where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Lastupdate whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Lastupdate whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
