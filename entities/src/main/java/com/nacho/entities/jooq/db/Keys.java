/*
 * This file is generated by jOOQ.
 */
package com.nacho.entities.jooq.db;


import com.nacho.entities.jooq.db.tables.Announcements;
import com.nacho.entities.jooq.db.tables.Balance;
import com.nacho.entities.jooq.db.tables.Holder;
import com.nacho.entities.jooq.db.tables.PriceData;
import com.nacho.entities.jooq.db.tables.Token;
import com.nacho.entities.jooq.db.tables.Transaction;
import com.nacho.entities.jooq.db.tables.Users;
import com.nacho.entities.jooq.db.tables.Whitelist;
import com.nacho.entities.jooq.db.tables.records.AnnouncementsRecord;
import com.nacho.entities.jooq.db.tables.records.BalanceRecord;
import com.nacho.entities.jooq.db.tables.records.HolderRecord;
import com.nacho.entities.jooq.db.tables.records.PriceDataRecord;
import com.nacho.entities.jooq.db.tables.records.TokenRecord;
import com.nacho.entities.jooq.db.tables.records.TransactionRecord;
import com.nacho.entities.jooq.db.tables.records.UsersRecord;
import com.nacho.entities.jooq.db.tables.records.WhitelistRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AnnouncementsRecord> PK_ANNOUNCEMENTS = Internal.createUniqueKey(Announcements.ANNOUNCEMENTS, DSL.name("pk_announcements"), new TableField[] { Announcements.ANNOUNCEMENTS.ID }, true);
    public static final UniqueKey<BalanceRecord> PK_BALANCE = Internal.createUniqueKey(Balance.BALANCE, DSL.name("pk_balance"), new TableField[] { Balance.BALANCE.ID }, true);
    public static final UniqueKey<HolderRecord> HOLDER_ADDRESS_KEY = Internal.createUniqueKey(Holder.HOLDER, DSL.name("Holder_address_key"), new TableField[] { Holder.HOLDER.ADDRESS }, true);
    public static final UniqueKey<HolderRecord> PK_HOLDER = Internal.createUniqueKey(Holder.HOLDER, DSL.name("pk_holder"), new TableField[] { Holder.HOLDER.ID }, true);
    public static final UniqueKey<PriceDataRecord> PK_PRICE_DATA = Internal.createUniqueKey(PriceData.PRICE_DATA, DSL.name("PK_Price_Data"), new TableField[] { PriceData.PRICE_DATA.ID }, true);
    public static final UniqueKey<TokenRecord> PK_TOKEN = Internal.createUniqueKey(Token.TOKEN, DSL.name("pk_token"), new TableField[] { Token.TOKEN.ID }, true);
    public static final UniqueKey<TokenRecord> TOKEN_TICK_KEY = Internal.createUniqueKey(Token.TOKEN, DSL.name("Token_tick_key"), new TableField[] { Token.TOKEN.TICK }, true);
    public static final UniqueKey<TransactionRecord> PK_TRANSACTION = Internal.createUniqueKey(Transaction.TRANSACTION, DSL.name("pk_transaction"), new TableField[] { Transaction.TRANSACTION.ID }, true);
    public static final UniqueKey<UsersRecord> PK_USERS = Internal.createUniqueKey(Users.USERS, DSL.name("pk_users"), new TableField[] { Users.USERS.ID }, true);
    public static final UniqueKey<WhitelistRecord> PK_WHITELIST = Internal.createUniqueKey(Whitelist.WHITELIST, DSL.name("pk_whitelist"), new TableField[] { Whitelist.WHITELIST.ID }, true);
    public static final UniqueKey<WhitelistRecord> WHITELIST_ADDRESS_KEY = Internal.createUniqueKey(Whitelist.WHITELIST, DSL.name("Whitelist_address_key"), new TableField[] { Whitelist.WHITELIST.ADDRESS }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<BalanceRecord, HolderRecord> BALANCE__FK_BALANCE_HOLDER = Internal.createForeignKey(Balance.BALANCE, DSL.name("fk_balance_holder"), new TableField[] { Balance.BALANCE.HOLDER_ID }, Keys.PK_HOLDER, new TableField[] { Holder.HOLDER.ID }, true);
    public static final ForeignKey<PriceDataRecord, TokenRecord> PRICE_DATA__FK_PRICE_DATA_TOKEN = Internal.createForeignKey(PriceData.PRICE_DATA, DSL.name("fk_price_data_token"), new TableField[] { PriceData.PRICE_DATA.FK_TOKEN }, Keys.PK_TOKEN, new TableField[] { Token.TOKEN.ID }, true);
    public static final ForeignKey<TransactionRecord, TokenRecord> TRANSACTION__FK_TRANSACTION_TOKEN = Internal.createForeignKey(Transaction.TRANSACTION, DSL.name("fk_transaction_token"), new TableField[] { Transaction.TRANSACTION.FK_TOKEN }, Keys.PK_TOKEN, new TableField[] { Token.TOKEN.ID }, true);
}
