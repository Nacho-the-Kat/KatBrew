/*
 * This file is generated by jOOQ.
 */
package com.nacho.entities.jooq.db.tables.pojos;


import com.nacho.entities.jooq.db.tables.interfaces.ITokens;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Tokens implements ITokens {

    private static final long serialVersionUID = 1L;

    private Integer id;
    private String username;
    private String password;

    public Tokens() {}

    public Tokens(ITokens value) {
        this.id = value.getId();
        this.username = value.getUsername();
        this.password = value.getPassword();
    }

    public Tokens(
        Integer id,
        String username,
        String password
    ) {
        this.id = id;
        this.username = username;
        this.password = password;
    }

    /**
     * Getter for <code>public.Tokens.id</code>.
     */
    @Override
    public Integer getId() {
        return this.id;
    }

    /**
     * Setter for <code>public.Tokens.id</code>.
     */
    @Override
    public void setId(Integer id) {
        this.id = id;
    }

    /**
     * Getter for <code>public.Tokens.username</code>.
     */
    @Override
    public String getUsername() {
        return this.username;
    }

    /**
     * Setter for <code>public.Tokens.username</code>.
     */
    @Override
    public void setUsername(String username) {
        this.username = username;
    }

    /**
     * Getter for <code>public.Tokens.password</code>.
     */
    @Override
    public String getPassword() {
        return this.password;
    }

    /**
     * Setter for <code>public.Tokens.password</code>.
     */
    @Override
    public void setPassword(String password) {
        this.password = password;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Tokens other = (Tokens) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.username == null) {
            if (other.username != null)
                return false;
        }
        else if (!this.username.equals(other.username))
            return false;
        if (this.password == null) {
            if (other.password != null)
                return false;
        }
        else if (!this.password.equals(other.password))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.username == null) ? 0 : this.username.hashCode());
        result = prime * result + ((this.password == null) ? 0 : this.password.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Tokens (");

        sb.append(id);
        sb.append(", ").append(username);
        sb.append(", ").append(password);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(ITokens from) {
        setId(from.getId());
        setUsername(from.getUsername());
        setPassword(from.getPassword());
    }

    @Override
    public <E extends ITokens> E into(E into) {
        into.from(this);
        return into;
    }
}
