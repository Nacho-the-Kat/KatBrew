/*
 * This file is generated by jOOQ.
 */
package com.nacho.entities.jooq.db.tables.records;


import com.nacho.entities.jooq.db.tables.Transaction;
import com.nacho.entities.jooq.db.tables.interfaces.ITransaction;

import java.time.LocalDateTime;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TransactionRecord extends UpdatableRecordImpl<TransactionRecord> implements ITransaction {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.Transaction.id</code>.
     */
    @Override
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.Transaction.id</code>.
     */
    @Override
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.Transaction.fk_token</code>.
     */
    @Override
    public void setFkToken(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.Transaction.fk_token</code>.
     */
    @Override
    public Integer getFkToken() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.Transaction.hashrev</code>.
     */
    @Override
    public void setHashrev(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.Transaction.hashrev</code>.
     */
    @Override
    public String getHashrev() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.Transaction.p</code>.
     */
    @Override
    public void setP(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.Transaction.p</code>.
     */
    @Override
    public String getP() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.Transaction.op</code>.
     */
    @Override
    public void setOp(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.Transaction.op</code>.
     */
    @Override
    public String getOp() {
        return (String) get(4);
    }

    /**
     * Setter for <code>public.Transaction.amt</code>.
     */
    @Override
    public void setAmt(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.Transaction.amt</code>.
     */
    @Override
    public String getAmt() {
        return (String) get(5);
    }

    /**
     * Setter for <code>public.Transaction.from</code>.
     */
    @Override
    public void setFrom(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.Transaction.from</code>.
     */
    @Override
    public String getFrom() {
        return (String) get(6);
    }

    /**
     * Setter for <code>public.Transaction.to</code>.
     */
    @Override
    public void setTo(String value) {
        set(7, value);
    }

    /**
     * Getter for <code>public.Transaction.to</code>.
     */
    @Override
    public String getTo() {
        return (String) get(7);
    }

    /**
     * Setter for <code>public.Transaction.op_score</code>.
     */
    @Override
    public void setOpScore(String value) {
        set(8, value);
    }

    /**
     * Getter for <code>public.Transaction.op_score</code>.
     */
    @Override
    public String getOpScore() {
        return (String) get(8);
    }

    /**
     * Setter for <code>public.Transaction.fee_rev</code>.
     */
    @Override
    public void setFeeRev(String value) {
        set(9, value);
    }

    /**
     * Getter for <code>public.Transaction.fee_rev</code>.
     */
    @Override
    public String getFeeRev() {
        return (String) get(9);
    }

    /**
     * Setter for <code>public.Transaction.tx_accept</code>.
     */
    @Override
    public void setTxAccept(String value) {
        set(10, value);
    }

    /**
     * Getter for <code>public.Transaction.tx_accept</code>.
     */
    @Override
    public String getTxAccept() {
        return (String) get(10);
    }

    /**
     * Setter for <code>public.Transaction.op_accept</code>.
     */
    @Override
    public void setOpAccept(String value) {
        set(11, value);
    }

    /**
     * Getter for <code>public.Transaction.op_accept</code>.
     */
    @Override
    public String getOpAccept() {
        return (String) get(11);
    }

    /**
     * Setter for <code>public.Transaction.op_error</code>.
     */
    @Override
    public void setOpError(String value) {
        set(12, value);
    }

    /**
     * Getter for <code>public.Transaction.op_error</code>.
     */
    @Override
    public String getOpError() {
        return (String) get(12);
    }

    /**
     * Setter for <code>public.Transaction.checkpoint</code>.
     */
    @Override
    public void setCheckpoint(String value) {
        set(13, value);
    }

    /**
     * Getter for <code>public.Transaction.checkpoint</code>.
     */
    @Override
    public String getCheckpoint() {
        return (String) get(13);
    }

    /**
     * Setter for <code>public.Transaction.max</code>.
     */
    @Override
    public void setMax(Long value) {
        set(14, value);
    }

    /**
     * Getter for <code>public.Transaction.max</code>.
     */
    @Override
    public Long getMax() {
        return (Long) get(14);
    }

    /**
     * Setter for <code>public.Transaction.lim</code>.
     */
    @Override
    public void setLim(Long value) {
        set(15, value);
    }

    /**
     * Getter for <code>public.Transaction.lim</code>.
     */
    @Override
    public Long getLim() {
        return (Long) get(15);
    }

    /**
     * Setter for <code>public.Transaction.pre</code>.
     */
    @Override
    public void setPre(Long value) {
        set(16, value);
    }

    /**
     * Getter for <code>public.Transaction.pre</code>.
     */
    @Override
    public Long getPre() {
        return (Long) get(16);
    }

    /**
     * Setter for <code>public.Transaction.mts_add</code>.
     */
    @Override
    public void setMtsAdd(Long value) {
        set(17, value);
    }

    /**
     * Getter for <code>public.Transaction.mts_add</code>.
     */
    @Override
    public Long getMtsAdd() {
        return (Long) get(17);
    }

    /**
     * Setter for <code>public.Transaction.mts_mod</code>.
     */
    @Override
    public void setMtsMod(Long value) {
        set(18, value);
    }

    /**
     * Getter for <code>public.Transaction.mts_mod</code>.
     */
    @Override
    public Long getMtsMod() {
        return (Long) get(18);
    }

    /**
     * Setter for <code>public.Transaction.dec</code>.
     */
    @Override
    public void setDec(Integer value) {
        set(19, value);
    }

    /**
     * Getter for <code>public.Transaction.dec</code>.
     */
    @Override
    public Integer getDec() {
        return (Integer) get(19);
    }

    /**
     * Setter for <code>public.Transaction.timestamp</code>.
     */
    @Override
    public void setTimestamp(LocalDateTime value) {
        set(20, value);
    }

    /**
     * Getter for <code>public.Transaction.timestamp</code>.
     */
    @Override
    public LocalDateTime getTimestamp() {
        return (LocalDateTime) get(20);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(ITransaction from) {
        setId(from.getId());
        setFkToken(from.getFkToken());
        setHashrev(from.getHashrev());
        setP(from.getP());
        setOp(from.getOp());
        setAmt(from.getAmt());
        setFrom(from.getFrom());
        setTo(from.getTo());
        setOpScore(from.getOpScore());
        setFeeRev(from.getFeeRev());
        setTxAccept(from.getTxAccept());
        setOpAccept(from.getOpAccept());
        setOpError(from.getOpError());
        setCheckpoint(from.getCheckpoint());
        setMax(from.getMax());
        setLim(from.getLim());
        setPre(from.getPre());
        setMtsAdd(from.getMtsAdd());
        setMtsMod(from.getMtsMod());
        setDec(from.getDec());
        setTimestamp(from.getTimestamp());
        resetChangedOnNotNull();
    }

    @Override
    public <E extends ITransaction> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TransactionRecord
     */
    public TransactionRecord() {
        super(Transaction.TRANSACTION);
    }

    /**
     * Create a detached, initialised TransactionRecord
     */
    public TransactionRecord(Long id, Integer fkToken, String hashrev, String p, String op, String amt, String from, String to, String opScore, String feeRev, String txAccept, String opAccept, String opError, String checkpoint, Long max, Long lim, Long pre, Long mtsAdd, Long mtsMod, Integer dec, LocalDateTime timestamp) {
        super(Transaction.TRANSACTION);

        setId(id);
        setFkToken(fkToken);
        setHashrev(hashrev);
        setP(p);
        setOp(op);
        setAmt(amt);
        setFrom(from);
        setTo(to);
        setOpScore(opScore);
        setFeeRev(feeRev);
        setTxAccept(txAccept);
        setOpAccept(opAccept);
        setOpError(opError);
        setCheckpoint(checkpoint);
        setMax(max);
        setLim(lim);
        setPre(pre);
        setMtsAdd(mtsAdd);
        setMtsMod(mtsMod);
        setDec(dec);
        setTimestamp(timestamp);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised TransactionRecord
     */
    public TransactionRecord(com.nacho.entities.jooq.db.tables.pojos.Transaction value) {
        super(Transaction.TRANSACTION);

        if (value != null) {
            setId(value.getId());
            setFkToken(value.getFkToken());
            setHashrev(value.getHashrev());
            setP(value.getP());
            setOp(value.getOp());
            setAmt(value.getAmt());
            setFrom(value.getFrom());
            setTo(value.getTo());
            setOpScore(value.getOpScore());
            setFeeRev(value.getFeeRev());
            setTxAccept(value.getTxAccept());
            setOpAccept(value.getOpAccept());
            setOpError(value.getOpError());
            setCheckpoint(value.getCheckpoint());
            setMax(value.getMax());
            setLim(value.getLim());
            setPre(value.getPre());
            setMtsAdd(value.getMtsAdd());
            setMtsMod(value.getMtsMod());
            setDec(value.getDec());
            setTimestamp(value.getTimestamp());
            resetChangedOnNotNull();
        }
    }
}
