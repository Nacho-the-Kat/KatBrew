/*
 * This file is generated by jOOQ.
 */
package com.nacho.entities.jooq.db.tables;


import com.nacho.entities.jooq.db.Indexes;
import com.nacho.entities.jooq.db.Keys;
import com.nacho.entities.jooq.db.Public;
import com.nacho.entities.jooq.db.tables.Token.TokenPath;
import com.nacho.entities.jooq.db.tables.records.TransactionRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Transaction extends TableImpl<TransactionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.Transaction</code>
     */
    public static final Transaction TRANSACTION = new Transaction();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransactionRecord> getRecordType() {
        return TransactionRecord.class;
    }

    /**
     * The column <code>public.Transaction.hashRev</code>.
     */
    public final TableField<TransactionRecord, String> HASHREV = createField(DSL.name("hashRev"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.Transaction.p</code>.
     */
    public final TableField<TransactionRecord, String> P = createField(DSL.name("p"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.Transaction.op</code>.
     */
    public final TableField<TransactionRecord, String> OP = createField(DSL.name("op"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.Transaction.tick</code>.
     */
    public final TableField<TransactionRecord, String> TICK = createField(DSL.name("tick"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.Transaction.amt</code>.
     */
    public final TableField<TransactionRecord, String> AMT = createField(DSL.name("amt"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.Transaction.from</code>.
     */
    public final TableField<TransactionRecord, String> FROM = createField(DSL.name("from"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.Transaction.to</code>.
     */
    public final TableField<TransactionRecord, String> TO = createField(DSL.name("to"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.Transaction.opScore</code>.
     */
    public final TableField<TransactionRecord, String> OPSCORE = createField(DSL.name("opScore"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.Transaction.feeRev</code>.
     */
    public final TableField<TransactionRecord, String> FEEREV = createField(DSL.name("feeRev"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.Transaction.txAccept</code>.
     */
    public final TableField<TransactionRecord, String> TXACCEPT = createField(DSL.name("txAccept"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.Transaction.opAccept</code>.
     */
    public final TableField<TransactionRecord, String> OPACCEPT = createField(DSL.name("opAccept"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.Transaction.opError</code>.
     */
    public final TableField<TransactionRecord, String> OPERROR = createField(DSL.name("opError"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.Transaction.checkpoint</code>.
     */
    public final TableField<TransactionRecord, String> CHECKPOINT = createField(DSL.name("checkpoint"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.Transaction.mtsAdd</code>.
     */
    public final TableField<TransactionRecord, String> MTSADD = createField(DSL.name("mtsAdd"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.Transaction.mtsMod</code>.
     */
    public final TableField<TransactionRecord, String> MTSMOD = createField(DSL.name("mtsMod"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.Transaction.max</code>.
     */
    public final TableField<TransactionRecord, String> MAX = createField(DSL.name("max"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.Transaction.lim</code>.
     */
    public final TableField<TransactionRecord, String> LIM = createField(DSL.name("lim"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.Transaction.pre</code>.
     */
    public final TableField<TransactionRecord, String> PRE = createField(DSL.name("pre"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.Transaction.dec</code>.
     */
    public final TableField<TransactionRecord, String> DEC = createField(DSL.name("dec"), SQLDataType.CLOB, this, "");

    private Transaction(Name alias, Table<TransactionRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Transaction(Name alias, Table<TransactionRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.Transaction</code> table reference
     */
    public Transaction(String alias) {
        this(DSL.name(alias), TRANSACTION);
    }

    /**
     * Create an aliased <code>public.Transaction</code> table reference
     */
    public Transaction(Name alias) {
        this(alias, TRANSACTION);
    }

    /**
     * Create a <code>public.Transaction</code> table reference
     */
    public Transaction() {
        this(DSL.name("Transaction"), null);
    }

    public <O extends Record> Transaction(Table<O> path, ForeignKey<O, TransactionRecord> childPath, InverseForeignKey<O, TransactionRecord> parentPath) {
        super(path, childPath, parentPath, TRANSACTION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TransactionPath extends Transaction implements Path<TransactionRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> TransactionPath(Table<O> path, ForeignKey<O, TransactionRecord> childPath, InverseForeignKey<O, TransactionRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TransactionPath(Name alias, Table<TransactionRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TransactionPath as(String alias) {
            return new TransactionPath(DSL.name(alias), this);
        }

        @Override
        public TransactionPath as(Name alias) {
            return new TransactionPath(alias, this);
        }

        @Override
        public TransactionPath as(Table<?> alias) {
            return new TransactionPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.TRANSACTION_TICK_MTSADD_IDX);
    }

    @Override
    public UniqueKey<TransactionRecord> getPrimaryKey() {
        return Keys.TRANSACTION_PKEY;
    }

    @Override
    public List<ForeignKey<TransactionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TRANSACTION__TRANSACTION_TICK_FKEY);
    }

    private transient TokenPath _token;

    /**
     * Get the implicit join path to the <code>public.Token</code> table.
     */
    public TokenPath token() {
        if (_token == null)
            _token = new TokenPath(this, Keys.TRANSACTION__TRANSACTION_TICK_FKEY, null);

        return _token;
    }

    @Override
    public Transaction as(String alias) {
        return new Transaction(DSL.name(alias), this);
    }

    @Override
    public Transaction as(Name alias) {
        return new Transaction(alias, this);
    }

    @Override
    public Transaction as(Table<?> alias) {
        return new Transaction(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Transaction rename(String name) {
        return new Transaction(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Transaction rename(Name name) {
        return new Transaction(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Transaction rename(Table<?> name) {
        return new Transaction(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Transaction where(Condition condition) {
        return new Transaction(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Transaction where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Transaction where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Transaction where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Transaction where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Transaction where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Transaction where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Transaction where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Transaction whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Transaction whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
