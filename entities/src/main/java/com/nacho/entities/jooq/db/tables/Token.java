/*
 * This file is generated by jOOQ.
 */
package com.nacho.entities.jooq.db.tables;


import com.nacho.entities.jooq.db.Keys;
import com.nacho.entities.jooq.db.Public;
import com.nacho.entities.jooq.db.tables.Balance.BalancePath;
import com.nacho.entities.jooq.db.tables.Pricedata.PricedataPath;
import com.nacho.entities.jooq.db.tables.Transaction.TransactionPath;
import com.nacho.entities.jooq.db.tables.records.TokenRecord;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Token extends TableImpl<TokenRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.Token</code>
     */
    public static final Token TOKEN = new Token();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TokenRecord> getRecordType() {
        return TokenRecord.class;
    }

    /**
     * The column <code>public.Token.tick</code>.
     */
    public final TableField<TokenRecord, String> TICK = createField(DSL.name("tick"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.Token.max</code>.
     */
    public final TableField<TokenRecord, String> MAX = createField(DSL.name("max"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.Token.lim</code>.
     */
    public final TableField<TokenRecord, String> LIM = createField(DSL.name("lim"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.Token.pre</code>.
     */
    public final TableField<TokenRecord, String> PRE = createField(DSL.name("pre"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.Token.to</code>.
     */
    public final TableField<TokenRecord, String> TO = createField(DSL.name("to"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.Token.dec</code>.
     */
    public final TableField<TokenRecord, String> DEC = createField(DSL.name("dec"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.Token.minted</code>.
     */
    public final TableField<TokenRecord, String> MINTED = createField(DSL.name("minted"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.Token.opScoreAdd</code>.
     */
    public final TableField<TokenRecord, String> OPSCOREADD = createField(DSL.name("opScoreAdd"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.Token.opScoreMod</code>.
     */
    public final TableField<TokenRecord, String> OPSCOREMOD = createField(DSL.name("opScoreMod"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.Token.state</code>.
     */
    public final TableField<TokenRecord, String> STATE = createField(DSL.name("state"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.Token.hashRev</code>.
     */
    public final TableField<TokenRecord, String> HASHREV = createField(DSL.name("hashRev"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.Token.mtsAdd</code>.
     */
    public final TableField<TokenRecord, String> MTSADD = createField(DSL.name("mtsAdd"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.Token.holderTotal</code>.
     */
    public final TableField<TokenRecord, Integer> HOLDERTOTAL = createField(DSL.name("holderTotal"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.Token.transferTotal</code>.
     */
    public final TableField<TokenRecord, Integer> TRANSFERTOTAL = createField(DSL.name("transferTotal"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.Token.mintTotal</code>.
     */
    public final TableField<TokenRecord, Integer> MINTTOTAL = createField(DSL.name("mintTotal"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.Token.lastUpdated</code>.
     */
    public final TableField<TokenRecord, LocalDateTime> LASTUPDATED = createField(DSL.name("lastUpdated"), SQLDataType.LOCALDATETIME(3).nullable(false), this, "");

    /**
     * The column <code>public.Token.logo</code>.
     */
    public final TableField<TokenRecord, String> LOGO = createField(DSL.name("logo"), SQLDataType.CLOB, this, "");

    private Token(Name alias, Table<TokenRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Token(Name alias, Table<TokenRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.Token</code> table reference
     */
    public Token(String alias) {
        this(DSL.name(alias), TOKEN);
    }

    /**
     * Create an aliased <code>public.Token</code> table reference
     */
    public Token(Name alias) {
        this(alias, TOKEN);
    }

    /**
     * Create a <code>public.Token</code> table reference
     */
    public Token() {
        this(DSL.name("Token"), null);
    }

    public <O extends Record> Token(Table<O> path, ForeignKey<O, TokenRecord> childPath, InverseForeignKey<O, TokenRecord> parentPath) {
        super(path, childPath, parentPath, TOKEN);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TokenPath extends Token implements Path<TokenRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> TokenPath(Table<O> path, ForeignKey<O, TokenRecord> childPath, InverseForeignKey<O, TokenRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TokenPath(Name alias, Table<TokenRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TokenPath as(String alias) {
            return new TokenPath(DSL.name(alias), this);
        }

        @Override
        public TokenPath as(Name alias) {
            return new TokenPath(alias, this);
        }

        @Override
        public TokenPath as(Table<?> alias) {
            return new TokenPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<TokenRecord> getPrimaryKey() {
        return Keys.TOKEN_PKEY;
    }

    private transient BalancePath _balance;

    /**
     * Get the implicit to-many join path to the <code>public.Balance</code>
     * table
     */
    public BalancePath balance() {
        if (_balance == null)
            _balance = new BalancePath(this, null, Keys.BALANCE__BALANCE_TOKENTICK_FKEY.getInverseKey());

        return _balance;
    }

    private transient PricedataPath _pricedata;

    /**
     * Get the implicit to-many join path to the <code>public.PriceData</code>
     * table
     */
    public PricedataPath pricedata() {
        if (_pricedata == null)
            _pricedata = new PricedataPath(this, null, Keys.PRICEDATA__PRICEDATA_TICK_FKEY.getInverseKey());

        return _pricedata;
    }

    private transient TransactionPath _transaction;

    /**
     * Get the implicit to-many join path to the <code>public.Transaction</code>
     * table
     */
    public TransactionPath transaction() {
        if (_transaction == null)
            _transaction = new TransactionPath(this, null, Keys.TRANSACTION__TRANSACTION_TICK_FKEY.getInverseKey());

        return _transaction;
    }

    @Override
    public Token as(String alias) {
        return new Token(DSL.name(alias), this);
    }

    @Override
    public Token as(Name alias) {
        return new Token(alias, this);
    }

    @Override
    public Token as(Table<?> alias) {
        return new Token(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Token rename(String name) {
        return new Token(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Token rename(Name name) {
        return new Token(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Token rename(Table<?> name) {
        return new Token(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Token where(Condition condition) {
        return new Token(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Token where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Token where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Token where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Token where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Token where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Token where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Token where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Token whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Token whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
