/*
 * This file is generated by jOOQ.
 */
package com.katbrew.entities.jooq.db.tables;


import com.katbrew.entities.jooq.db.Keys;
import com.katbrew.entities.jooq.db.Public;
import com.katbrew.entities.jooq.db.tables.records.TopHolderRecord;

import java.math.BigInteger;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.AutoConverter;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TopHolder extends TableImpl<TopHolderRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.Top_Holder</code>
     */
    public static final TopHolder TOP_HOLDER = new TopHolder();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TopHolderRecord> getRecordType() {
        return TopHolderRecord.class;
    }

    /**
     * The column <code>public.Top_Holder.id</code>.
     */
    public final TableField<TopHolderRecord, BigInteger> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "", new AutoConverter<Long, BigInteger>(Long.class, BigInteger.class));

    /**
     * The column <code>public.Top_Holder.address</code>.
     */
    public final TableField<TopHolderRecord, String> ADDRESS = createField(DSL.name("address"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.Top_Holder.token_count</code>.
     */
    public final TableField<TopHolderRecord, Integer> TOKEN_COUNT = createField(DSL.name("token_count"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.Top_Holder.balances</code>.
     */
    public final TableField<TopHolderRecord, String> BALANCES = createField(DSL.name("balances"), SQLDataType.CLOB, this, "");

    private TopHolder(Name alias, Table<TopHolderRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private TopHolder(Name alias, Table<TopHolderRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.Top_Holder</code> table reference
     */
    public TopHolder(String alias) {
        this(DSL.name(alias), TOP_HOLDER);
    }

    /**
     * Create an aliased <code>public.Top_Holder</code> table reference
     */
    public TopHolder(Name alias) {
        this(alias, TOP_HOLDER);
    }

    /**
     * Create a <code>public.Top_Holder</code> table reference
     */
    public TopHolder() {
        this(DSL.name("Top_Holder"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<TopHolderRecord, BigInteger> getIdentity() {
        return (Identity<TopHolderRecord, BigInteger>) super.getIdentity();
    }

    @Override
    public UniqueKey<TopHolderRecord> getPrimaryKey() {
        return Keys.PK_TOP_HOLDER;
    }

    @Override
    public TopHolder as(String alias) {
        return new TopHolder(DSL.name(alias), this);
    }

    @Override
    public TopHolder as(Name alias) {
        return new TopHolder(alias, this);
    }

    @Override
    public TopHolder as(Table<?> alias) {
        return new TopHolder(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TopHolder rename(String name) {
        return new TopHolder(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TopHolder rename(Name name) {
        return new TopHolder(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TopHolder rename(Table<?> name) {
        return new TopHolder(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TopHolder where(Condition condition) {
        return new TopHolder(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TopHolder where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TopHolder where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TopHolder where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TopHolder where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TopHolder where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TopHolder where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TopHolder where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TopHolder whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TopHolder whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
