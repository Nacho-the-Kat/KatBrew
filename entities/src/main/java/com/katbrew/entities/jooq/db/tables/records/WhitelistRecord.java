/*
 * This file is generated by jOOQ.
 */
package com.katbrew.entities.jooq.db.tables.records;


import com.katbrew.entities.jooq.db.tables.Whitelist;
import com.katbrew.entities.jooq.db.tables.interfaces.IWhitelist;

import java.time.LocalDateTime;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class WhitelistRecord extends UpdatableRecordImpl<WhitelistRecord> implements IWhitelist {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.Whitelist.id</code>.
     */
    @Override
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.Whitelist.id</code>.
     */
    @Override
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.Whitelist.address</code>.
     */
    @Override
    public void setAddress(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.Whitelist.address</code>.
     */
    @Override
    public String getAddress() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.Whitelist.updated_by</code>.
     */
    @Override
    public void setUpdatedBy(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.Whitelist.updated_by</code>.
     */
    @Override
    public Integer getUpdatedBy() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>public.Whitelist.updated_at</code>.
     */
    @Override
    public void setUpdatedAt(LocalDateTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.Whitelist.updated_at</code>.
     */
    @Override
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(3);
    }

    /**
     * Setter for <code>public.Whitelist.previousAddress</code>.
     */
    @Override
    public void setPreviousaddress(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.Whitelist.previousAddress</code>.
     */
    @Override
    public String getPreviousaddress() {
        return (String) get(4);
    }

    /**
     * Setter for <code>public.Whitelist.signature</code>.
     */
    @Override
    public void setSignature(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.Whitelist.signature</code>.
     */
    @Override
    public String getSignature() {
        return (String) get(5);
    }

    /**
     * Setter for <code>public.Whitelist.active</code>.
     */
    @Override
    public void setActive(Boolean value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.Whitelist.active</code>.
     */
    @Override
    public Boolean getActive() {
        return (Boolean) get(6);
    }

    /**
     * Setter for <code>public.Whitelist.change_type</code>.
     */
    @Override
    public void setChangeType(String value) {
        set(7, value);
    }

    /**
     * Getter for <code>public.Whitelist.change_type</code>.
     */
    @Override
    public String getChangeType() {
        return (String) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IWhitelist from) {
        setId(from.getId());
        setAddress(from.getAddress());
        setUpdatedBy(from.getUpdatedBy());
        setUpdatedAt(from.getUpdatedAt());
        setPreviousaddress(from.getPreviousaddress());
        setSignature(from.getSignature());
        setActive(from.getActive());
        setChangeType(from.getChangeType());
        resetChangedOnNotNull();
    }

    @Override
    public <E extends IWhitelist> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached WhitelistRecord
     */
    public WhitelistRecord() {
        super(Whitelist.WHITELIST);
    }

    /**
     * Create a detached, initialised WhitelistRecord
     */
    public WhitelistRecord(Integer id, String address, Integer updatedBy, LocalDateTime updatedAt, String previousaddress, String signature, Boolean active, String changeType) {
        super(Whitelist.WHITELIST);

        setId(id);
        setAddress(address);
        setUpdatedBy(updatedBy);
        setUpdatedAt(updatedAt);
        setPreviousaddress(previousaddress);
        setSignature(signature);
        setActive(active);
        setChangeType(changeType);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised WhitelistRecord
     */
    public WhitelistRecord(com.katbrew.entities.jooq.db.tables.pojos.Whitelist value) {
        super(Whitelist.WHITELIST);

        if (value != null) {
            setId(value.getId());
            setAddress(value.getAddress());
            setUpdatedBy(value.getUpdatedBy());
            setUpdatedAt(value.getUpdatedAt());
            setPreviousaddress(value.getPreviousaddress());
            setSignature(value.getSignature());
            setActive(value.getActive());
            setChangeType(value.getChangeType());
            resetChangedOnNotNull();
        }
    }
}
