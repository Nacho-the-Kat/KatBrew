/*
 * This file is generated by jOOQ.
 */
package com.katbrew.entities.jooq.db.tables.records;


import com.katbrew.entities.jooq.db.tables.NftCollection;
import com.katbrew.entities.jooq.db.tables.interfaces.INftCollection;

import java.math.BigInteger;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class NftCollectionRecord extends UpdatableRecordImpl<NftCollectionRecord> implements INftCollection {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.nft_collection.id</code>.
     */
    @Override
    public void setId(BigInteger value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.nft_collection.id</code>.
     */
    @Override
    public BigInteger getId() {
        return (BigInteger) get(0);
    }

    /**
     * Setter for <code>public.nft_collection.tick</code>.
     */
    @Override
    public void setTick(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.nft_collection.tick</code>.
     */
    @Override
    public String getTick() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.nft_collection.deployer</code>.
     */
    @Override
    public void setDeployer(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.nft_collection.deployer</code>.
     */
    @Override
    public String getDeployer() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.nft_collection.buri</code>.
     */
    @Override
    public void setBuri(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.nft_collection.buri</code>.
     */
    @Override
    public String getBuri() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.nft_collection.tx_id_rev</code>.
     */
    @Override
    public void setTxIdRev(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.nft_collection.tx_id_rev</code>.
     */
    @Override
    public String getTxIdRev() {
        return (String) get(4);
    }

    /**
     * Setter for <code>public.nft_collection.state</code>.
     */
    @Override
    public void setState(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.nft_collection.state</code>.
     */
    @Override
    public String getState() {
        return (String) get(5);
    }

    /**
     * Setter for <code>public.nft_collection.max</code>.
     */
    @Override
    public void setMax(BigInteger value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.nft_collection.max</code>.
     */
    @Override
    public BigInteger getMax() {
        return (BigInteger) get(6);
    }

    /**
     * Setter for <code>public.nft_collection.minted</code>.
     */
    @Override
    public void setMinted(BigInteger value) {
        set(7, value);
    }

    /**
     * Getter for <code>public.nft_collection.minted</code>.
     */
    @Override
    public BigInteger getMinted() {
        return (BigInteger) get(7);
    }

    /**
     * Setter for <code>public.nft_collection.premint</code>.
     */
    @Override
    public void setPremint(Integer value) {
        set(8, value);
    }

    /**
     * Getter for <code>public.nft_collection.premint</code>.
     */
    @Override
    public Integer getPremint() {
        return (Integer) get(8);
    }

    /**
     * Setter for <code>public.nft_collection.daa_mint_start</code>.
     */
    @Override
    public void setDaaMintStart(BigInteger value) {
        set(9, value);
    }

    /**
     * Getter for <code>public.nft_collection.daa_mint_start</code>.
     */
    @Override
    public BigInteger getDaaMintStart() {
        return (BigInteger) get(9);
    }

    /**
     * Setter for <code>public.nft_collection.mts_add</code>.
     */
    @Override
    public void setMtsAdd(BigInteger value) {
        set(10, value);
    }

    /**
     * Getter for <code>public.nft_collection.mts_add</code>.
     */
    @Override
    public BigInteger getMtsAdd() {
        return (BigInteger) get(10);
    }

    /**
     * Setter for <code>public.nft_collection.op_score_add</code>.
     */
    @Override
    public void setOpScoreAdd(BigInteger value) {
        set(11, value);
    }

    /**
     * Getter for <code>public.nft_collection.op_score_add</code>.
     */
    @Override
    public BigInteger getOpScoreAdd() {
        return (BigInteger) get(11);
    }

    /**
     * Setter for <code>public.nft_collection.op_score_mod</code>.
     */
    @Override
    public void setOpScoreMod(BigInteger value) {
        set(12, value);
    }

    /**
     * Getter for <code>public.nft_collection.op_score_mod</code>.
     */
    @Override
    public BigInteger getOpScoreMod() {
        return (BigInteger) get(12);
    }

    /**
     * Setter for <code>public.nft_collection.royalty_fee</code>.
     */
    @Override
    public void setRoyaltyFee(BigInteger value) {
        set(13, value);
    }

    /**
     * Getter for <code>public.nft_collection.royalty_fee</code>.
     */
    @Override
    public BigInteger getRoyaltyFee() {
        return (BigInteger) get(13);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<BigInteger> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(INftCollection from) {
        setId(from.getId());
        setTick(from.getTick());
        setDeployer(from.getDeployer());
        setBuri(from.getBuri());
        setTxIdRev(from.getTxIdRev());
        setState(from.getState());
        setMax(from.getMax());
        setMinted(from.getMinted());
        setPremint(from.getPremint());
        setDaaMintStart(from.getDaaMintStart());
        setMtsAdd(from.getMtsAdd());
        setOpScoreAdd(from.getOpScoreAdd());
        setOpScoreMod(from.getOpScoreMod());
        setRoyaltyFee(from.getRoyaltyFee());
        resetChangedOnNotNull();
    }

    @Override
    public <E extends INftCollection> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached NftCollectionRecord
     */
    public NftCollectionRecord() {
        super(NftCollection.NFT_COLLECTION);
    }

    /**
     * Create a detached, initialised NftCollectionRecord
     */
    public NftCollectionRecord(BigInteger id, String tick, String deployer, String buri, String txIdRev, String state, BigInteger max, BigInteger minted, Integer premint, BigInteger daaMintStart, BigInteger mtsAdd, BigInteger opScoreAdd, BigInteger opScoreMod, BigInteger royaltyFee) {
        super(NftCollection.NFT_COLLECTION);

        setId(id);
        setTick(tick);
        setDeployer(deployer);
        setBuri(buri);
        setTxIdRev(txIdRev);
        setState(state);
        setMax(max);
        setMinted(minted);
        setPremint(premint);
        setDaaMintStart(daaMintStart);
        setMtsAdd(mtsAdd);
        setOpScoreAdd(opScoreAdd);
        setOpScoreMod(opScoreMod);
        setRoyaltyFee(royaltyFee);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised NftCollectionRecord
     */
    public NftCollectionRecord(com.katbrew.entities.jooq.db.tables.pojos.NftCollection value) {
        super(NftCollection.NFT_COLLECTION);

        if (value != null) {
            setId(value.getId());
            setTick(value.getTick());
            setDeployer(value.getDeployer());
            setBuri(value.getBuri());
            setTxIdRev(value.getTxIdRev());
            setState(value.getState());
            setMax(value.getMax());
            setMinted(value.getMinted());
            setPremint(value.getPremint());
            setDaaMintStart(value.getDaaMintStart());
            setMtsAdd(value.getMtsAdd());
            setOpScoreAdd(value.getOpScoreAdd());
            setOpScoreMod(value.getOpScoreMod());
            setRoyaltyFee(value.getRoyaltyFee());
            resetChangedOnNotNull();
        }
    }
}
