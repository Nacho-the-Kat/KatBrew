/*
 * This file is generated by jOOQ.
 */
package com.katbrew.entities.jooq.db.tables;


import com.katbrew.entities.jooq.db.Indexes;
import com.katbrew.entities.jooq.db.Keys;
import com.katbrew.entities.jooq.db.Public;
import com.katbrew.entities.jooq.db.tables.NftCollection.NftCollectionPath;
import com.katbrew.entities.jooq.db.tables.records.NftCollectionInfoRecord;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.AutoConverter;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NftCollectionInfo extends TableImpl<NftCollectionInfoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.nft_collection_info</code>
     */
    public static final NftCollectionInfo NFT_COLLECTION_INFO = new NftCollectionInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NftCollectionInfoRecord> getRecordType() {
        return NftCollectionInfoRecord.class;
    }

    /**
     * The column <code>public.nft_collection_info.id</code>.
     */
    public final TableField<NftCollectionInfoRecord, BigInteger> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "", new AutoConverter<Long, BigInteger>(Long.class, BigInteger.class));

    /**
     * The column <code>public.nft_collection_info.fk_collection</code>.
     */
    public final TableField<NftCollectionInfoRecord, BigInteger> FK_COLLECTION = createField(DSL.name("fk_collection"), SQLDataType.BIGINT.nullable(false), this, "", new AutoConverter<Long, BigInteger>(Long.class, BigInteger.class));

    /**
     * The column <code>public.nft_collection_info.name</code>.
     */
    public final TableField<NftCollectionInfoRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.nft_collection_info.tick</code>.
     */
    public final TableField<NftCollectionInfoRecord, String> TICK = createField(DSL.name("tick"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.nft_collection_info.description</code>.
     */
    public final TableField<NftCollectionInfoRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.nft_collection_info.image</code>.
     */
    public final TableField<NftCollectionInfoRecord, String> IMAGE = createField(DSL.name("image"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.nft_collection_info.properties</code>.
     */
    public final TableField<NftCollectionInfoRecord, String> PROPERTIES = createField(DSL.name("properties"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.nft_collection_info.extensions</code>.
     */
    public final TableField<NftCollectionInfoRecord, String> EXTENSIONS = createField(DSL.name("extensions"), SQLDataType.CLOB, this, "");

    private NftCollectionInfo(Name alias, Table<NftCollectionInfoRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private NftCollectionInfo(Name alias, Table<NftCollectionInfoRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.nft_collection_info</code> table reference
     */
    public NftCollectionInfo(String alias) {
        this(DSL.name(alias), NFT_COLLECTION_INFO);
    }

    /**
     * Create an aliased <code>public.nft_collection_info</code> table reference
     */
    public NftCollectionInfo(Name alias) {
        this(alias, NFT_COLLECTION_INFO);
    }

    /**
     * Create a <code>public.nft_collection_info</code> table reference
     */
    public NftCollectionInfo() {
        this(DSL.name("nft_collection_info"), null);
    }

    public <O extends Record> NftCollectionInfo(Table<O> path, ForeignKey<O, NftCollectionInfoRecord> childPath, InverseForeignKey<O, NftCollectionInfoRecord> parentPath) {
        super(path, childPath, parentPath, NFT_COLLECTION_INFO);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class NftCollectionInfoPath extends NftCollectionInfo implements Path<NftCollectionInfoRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> NftCollectionInfoPath(Table<O> path, ForeignKey<O, NftCollectionInfoRecord> childPath, InverseForeignKey<O, NftCollectionInfoRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private NftCollectionInfoPath(Name alias, Table<NftCollectionInfoRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public NftCollectionInfoPath as(String alias) {
            return new NftCollectionInfoPath(DSL.name(alias), this);
        }

        @Override
        public NftCollectionInfoPath as(Name alias) {
            return new NftCollectionInfoPath(alias, this);
        }

        @Override
        public NftCollectionInfoPath as(Table<?> alias) {
            return new NftCollectionInfoPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.NFT_COLLECTION_INFO_FK_COLLECTION_INDEX);
    }

    @Override
    public Identity<NftCollectionInfoRecord, BigInteger> getIdentity() {
        return (Identity<NftCollectionInfoRecord, BigInteger>) super.getIdentity();
    }

    @Override
    public UniqueKey<NftCollectionInfoRecord> getPrimaryKey() {
        return Keys.PK_NFT_COLLECTION_INFO;
    }

    @Override
    public List<UniqueKey<NftCollectionInfoRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.NFT_COLLECTION_INFO_FK_COLLECTION_KEY);
    }

    @Override
    public List<ForeignKey<NftCollectionInfoRecord, ?>> getReferences() {
        return Arrays.asList(Keys.NFT_COLLECTION_INFO__FK_COLLECTION_INFO_COLLECTION);
    }

    private transient NftCollectionPath _nftCollection;

    /**
     * Get the implicit join path to the <code>public.nft_collection</code>
     * table.
     */
    public NftCollectionPath nftCollection() {
        if (_nftCollection == null)
            _nftCollection = new NftCollectionPath(this, Keys.NFT_COLLECTION_INFO__FK_COLLECTION_INFO_COLLECTION, null);

        return _nftCollection;
    }

    @Override
    public NftCollectionInfo as(String alias) {
        return new NftCollectionInfo(DSL.name(alias), this);
    }

    @Override
    public NftCollectionInfo as(Name alias) {
        return new NftCollectionInfo(alias, this);
    }

    @Override
    public NftCollectionInfo as(Table<?> alias) {
        return new NftCollectionInfo(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public NftCollectionInfo rename(String name) {
        return new NftCollectionInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NftCollectionInfo rename(Name name) {
        return new NftCollectionInfo(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public NftCollectionInfo rename(Table<?> name) {
        return new NftCollectionInfo(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NftCollectionInfo where(Condition condition) {
        return new NftCollectionInfo(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NftCollectionInfo where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NftCollectionInfo where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NftCollectionInfo where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NftCollectionInfo where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NftCollectionInfo where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NftCollectionInfo where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NftCollectionInfo where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NftCollectionInfo whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NftCollectionInfo whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
