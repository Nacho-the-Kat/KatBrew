/*
 * This file is generated by jOOQ.
 */
package com.katbrew.entities.jooq.db.tables.pojos;


import com.katbrew.entities.jooq.db.tables.interfaces.IToken;

import java.math.BigInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Token implements IToken {

    private static final long serialVersionUID = 1L;

    private Integer id;
    private String tick;
    private BigInteger max;
    private BigInteger lim;
    private BigInteger pre;
    private BigInteger mtsAdd;
    private BigInteger minted;
    private Integer holderTotal;
    private Integer dec;
    private String state;
    private String logo;

    public Token() {}

    public Token(IToken value) {
        this.id = value.getId();
        this.tick = value.getTick();
        this.max = value.getMax();
        this.lim = value.getLim();
        this.pre = value.getPre();
        this.mtsAdd = value.getMtsAdd();
        this.minted = value.getMinted();
        this.holderTotal = value.getHolderTotal();
        this.dec = value.getDec();
        this.state = value.getState();
        this.logo = value.getLogo();
    }

    public Token(
        Integer id,
        String tick,
        BigInteger max,
        BigInteger lim,
        BigInteger pre,
        BigInteger mtsAdd,
        BigInteger minted,
        Integer holderTotal,
        Integer dec,
        String state,
        String logo
    ) {
        this.id = id;
        this.tick = tick;
        this.max = max;
        this.lim = lim;
        this.pre = pre;
        this.mtsAdd = mtsAdd;
        this.minted = minted;
        this.holderTotal = holderTotal;
        this.dec = dec;
        this.state = state;
        this.logo = logo;
    }

    /**
     * Getter for <code>public.Token.id</code>.
     */
    @Override
    public Integer getId() {
        return this.id;
    }

    /**
     * Setter for <code>public.Token.id</code>.
     */
    @Override
    public void setId(Integer id) {
        this.id = id;
    }

    /**
     * Getter for <code>public.Token.tick</code>.
     */
    @Override
    public String getTick() {
        return this.tick;
    }

    /**
     * Setter for <code>public.Token.tick</code>.
     */
    @Override
    public void setTick(String tick) {
        this.tick = tick;
    }

    /**
     * Getter for <code>public.Token.max</code>.
     */
    @Override
    public BigInteger getMax() {
        return this.max;
    }

    /**
     * Setter for <code>public.Token.max</code>.
     */
    @Override
    public void setMax(BigInteger max) {
        this.max = max;
    }

    /**
     * Getter for <code>public.Token.lim</code>.
     */
    @Override
    public BigInteger getLim() {
        return this.lim;
    }

    /**
     * Setter for <code>public.Token.lim</code>.
     */
    @Override
    public void setLim(BigInteger lim) {
        this.lim = lim;
    }

    /**
     * Getter for <code>public.Token.pre</code>.
     */
    @Override
    public BigInteger getPre() {
        return this.pre;
    }

    /**
     * Setter for <code>public.Token.pre</code>.
     */
    @Override
    public void setPre(BigInteger pre) {
        this.pre = pre;
    }

    /**
     * Getter for <code>public.Token.mts_add</code>.
     */
    @Override
    public BigInteger getMtsAdd() {
        return this.mtsAdd;
    }

    /**
     * Setter for <code>public.Token.mts_add</code>.
     */
    @Override
    public void setMtsAdd(BigInteger mtsAdd) {
        this.mtsAdd = mtsAdd;
    }

    /**
     * Getter for <code>public.Token.minted</code>.
     */
    @Override
    public BigInteger getMinted() {
        return this.minted;
    }

    /**
     * Setter for <code>public.Token.minted</code>.
     */
    @Override
    public void setMinted(BigInteger minted) {
        this.minted = minted;
    }

    /**
     * Getter for <code>public.Token.holder_total</code>.
     */
    @Override
    public Integer getHolderTotal() {
        return this.holderTotal;
    }

    /**
     * Setter for <code>public.Token.holder_total</code>.
     */
    @Override
    public void setHolderTotal(Integer holderTotal) {
        this.holderTotal = holderTotal;
    }

    /**
     * Getter for <code>public.Token.dec</code>.
     */
    @Override
    public Integer getDec() {
        return this.dec;
    }

    /**
     * Setter for <code>public.Token.dec</code>.
     */
    @Override
    public void setDec(Integer dec) {
        this.dec = dec;
    }

    /**
     * Getter for <code>public.Token.state</code>.
     */
    @Override
    public String getState() {
        return this.state;
    }

    /**
     * Setter for <code>public.Token.state</code>.
     */
    @Override
    public void setState(String state) {
        this.state = state;
    }

    /**
     * Getter for <code>public.Token.logo</code>.
     */
    @Override
    public String getLogo() {
        return this.logo;
    }

    /**
     * Setter for <code>public.Token.logo</code>.
     */
    @Override
    public void setLogo(String logo) {
        this.logo = logo;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Token other = (Token) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.tick == null) {
            if (other.tick != null)
                return false;
        }
        else if (!this.tick.equals(other.tick))
            return false;
        if (this.max == null) {
            if (other.max != null)
                return false;
        }
        else if (!this.max.equals(other.max))
            return false;
        if (this.lim == null) {
            if (other.lim != null)
                return false;
        }
        else if (!this.lim.equals(other.lim))
            return false;
        if (this.pre == null) {
            if (other.pre != null)
                return false;
        }
        else if (!this.pre.equals(other.pre))
            return false;
        if (this.mtsAdd == null) {
            if (other.mtsAdd != null)
                return false;
        }
        else if (!this.mtsAdd.equals(other.mtsAdd))
            return false;
        if (this.minted == null) {
            if (other.minted != null)
                return false;
        }
        else if (!this.minted.equals(other.minted))
            return false;
        if (this.holderTotal == null) {
            if (other.holderTotal != null)
                return false;
        }
        else if (!this.holderTotal.equals(other.holderTotal))
            return false;
        if (this.dec == null) {
            if (other.dec != null)
                return false;
        }
        else if (!this.dec.equals(other.dec))
            return false;
        if (this.state == null) {
            if (other.state != null)
                return false;
        }
        else if (!this.state.equals(other.state))
            return false;
        if (this.logo == null) {
            if (other.logo != null)
                return false;
        }
        else if (!this.logo.equals(other.logo))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.tick == null) ? 0 : this.tick.hashCode());
        result = prime * result + ((this.max == null) ? 0 : this.max.hashCode());
        result = prime * result + ((this.lim == null) ? 0 : this.lim.hashCode());
        result = prime * result + ((this.pre == null) ? 0 : this.pre.hashCode());
        result = prime * result + ((this.mtsAdd == null) ? 0 : this.mtsAdd.hashCode());
        result = prime * result + ((this.minted == null) ? 0 : this.minted.hashCode());
        result = prime * result + ((this.holderTotal == null) ? 0 : this.holderTotal.hashCode());
        result = prime * result + ((this.dec == null) ? 0 : this.dec.hashCode());
        result = prime * result + ((this.state == null) ? 0 : this.state.hashCode());
        result = prime * result + ((this.logo == null) ? 0 : this.logo.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Token (");

        sb.append(id);
        sb.append(", ").append(tick);
        sb.append(", ").append(max);
        sb.append(", ").append(lim);
        sb.append(", ").append(pre);
        sb.append(", ").append(mtsAdd);
        sb.append(", ").append(minted);
        sb.append(", ").append(holderTotal);
        sb.append(", ").append(dec);
        sb.append(", ").append(state);
        sb.append(", ").append(logo);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IToken from) {
        setId(from.getId());
        setTick(from.getTick());
        setMax(from.getMax());
        setLim(from.getLim());
        setPre(from.getPre());
        setMtsAdd(from.getMtsAdd());
        setMinted(from.getMinted());
        setHolderTotal(from.getHolderTotal());
        setDec(from.getDec());
        setState(from.getState());
        setLogo(from.getLogo());
    }

    @Override
    public <E extends IToken> E into(E into) {
        into.from(this);
        return into;
    }
}
