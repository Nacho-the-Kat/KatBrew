/*
 * This file is generated by jOOQ.
 */
package com.katbrew.entities.jooq.db.tables.daos;


import com.katbrew.entities.jooq.db.tables.NftCollection;
import com.katbrew.entities.jooq.db.tables.records.NftCollectionRecord;

import java.math.BigInteger;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.AutoConverter;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class NftCollectionDao extends DAOImpl<NftCollectionRecord, com.katbrew.entities.jooq.db.tables.pojos.NftCollection, BigInteger> {

    /**
     * Create a new NftCollectionDao without any configuration
     */
    public NftCollectionDao() {
        super(NftCollection.NFT_COLLECTION, com.katbrew.entities.jooq.db.tables.pojos.NftCollection.class);
    }

    /**
     * Create a new NftCollectionDao with an attached configuration
     */
    public NftCollectionDao(Configuration configuration) {
        super(NftCollection.NFT_COLLECTION, com.katbrew.entities.jooq.db.tables.pojos.NftCollection.class, configuration);
    }

    @Override
    public BigInteger getId(com.katbrew.entities.jooq.db.tables.pojos.NftCollection object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.katbrew.entities.jooq.db.tables.pojos.NftCollection> fetchRangeOfId(BigInteger lowerInclusive, BigInteger upperInclusive) {
        return fetchRange(NftCollection.NFT_COLLECTION.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.katbrew.entities.jooq.db.tables.pojos.NftCollection> fetchById(BigInteger... values) {
        return fetch(NftCollection.NFT_COLLECTION.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.katbrew.entities.jooq.db.tables.pojos.NftCollection fetchOneById(BigInteger value) {
        return fetchOne(NftCollection.NFT_COLLECTION.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<com.katbrew.entities.jooq.db.tables.pojos.NftCollection> fetchOptionalById(BigInteger value) {
        return fetchOptional(NftCollection.NFT_COLLECTION.ID, value);
    }

    /**
     * Fetch records that have <code>tick BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.katbrew.entities.jooq.db.tables.pojos.NftCollection> fetchRangeOfTick(String lowerInclusive, String upperInclusive) {
        return fetchRange(NftCollection.NFT_COLLECTION.TICK, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tick IN (values)</code>
     */
    public List<com.katbrew.entities.jooq.db.tables.pojos.NftCollection> fetchByTick(String... values) {
        return fetch(NftCollection.NFT_COLLECTION.TICK, values);
    }

    /**
     * Fetch a unique record that has <code>tick = value</code>
     */
    public com.katbrew.entities.jooq.db.tables.pojos.NftCollection fetchOneByTick(String value) {
        return fetchOne(NftCollection.NFT_COLLECTION.TICK, value);
    }

    /**
     * Fetch a unique record that has <code>tick = value</code>
     */
    public Optional<com.katbrew.entities.jooq.db.tables.pojos.NftCollection> fetchOptionalByTick(String value) {
        return fetchOptional(NftCollection.NFT_COLLECTION.TICK, value);
    }

    /**
     * Fetch records that have <code>deployer BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.katbrew.entities.jooq.db.tables.pojos.NftCollection> fetchRangeOfDeployer(String lowerInclusive, String upperInclusive) {
        return fetchRange(NftCollection.NFT_COLLECTION.DEPLOYER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>deployer IN (values)</code>
     */
    public List<com.katbrew.entities.jooq.db.tables.pojos.NftCollection> fetchByDeployer(String... values) {
        return fetch(NftCollection.NFT_COLLECTION.DEPLOYER, values);
    }

    /**
     * Fetch records that have <code>buri BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.katbrew.entities.jooq.db.tables.pojos.NftCollection> fetchRangeOfBuri(String lowerInclusive, String upperInclusive) {
        return fetchRange(NftCollection.NFT_COLLECTION.BURI, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>buri IN (values)</code>
     */
    public List<com.katbrew.entities.jooq.db.tables.pojos.NftCollection> fetchByBuri(String... values) {
        return fetch(NftCollection.NFT_COLLECTION.BURI, values);
    }

    /**
     * Fetch records that have <code>tx_id_rev BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.katbrew.entities.jooq.db.tables.pojos.NftCollection> fetchRangeOfTxIdRev(String lowerInclusive, String upperInclusive) {
        return fetchRange(NftCollection.NFT_COLLECTION.TX_ID_REV, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tx_id_rev IN (values)</code>
     */
    public List<com.katbrew.entities.jooq.db.tables.pojos.NftCollection> fetchByTxIdRev(String... values) {
        return fetch(NftCollection.NFT_COLLECTION.TX_ID_REV, values);
    }

    /**
     * Fetch a unique record that has <code>tx_id_rev = value</code>
     */
    public com.katbrew.entities.jooq.db.tables.pojos.NftCollection fetchOneByTxIdRev(String value) {
        return fetchOne(NftCollection.NFT_COLLECTION.TX_ID_REV, value);
    }

    /**
     * Fetch a unique record that has <code>tx_id_rev = value</code>
     */
    public Optional<com.katbrew.entities.jooq.db.tables.pojos.NftCollection> fetchOptionalByTxIdRev(String value) {
        return fetchOptional(NftCollection.NFT_COLLECTION.TX_ID_REV, value);
    }

    /**
     * Fetch records that have <code>state BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.katbrew.entities.jooq.db.tables.pojos.NftCollection> fetchRangeOfState(String lowerInclusive, String upperInclusive) {
        return fetchRange(NftCollection.NFT_COLLECTION.STATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>state IN (values)</code>
     */
    public List<com.katbrew.entities.jooq.db.tables.pojos.NftCollection> fetchByState(String... values) {
        return fetch(NftCollection.NFT_COLLECTION.STATE, values);
    }

    /**
     * Fetch records that have <code>max BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.katbrew.entities.jooq.db.tables.pojos.NftCollection> fetchRangeOfMax(BigInteger lowerInclusive, BigInteger upperInclusive) {
        return fetchRange(NftCollection.NFT_COLLECTION.MAX, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>max IN (values)</code>
     */
    public List<com.katbrew.entities.jooq.db.tables.pojos.NftCollection> fetchByMax(BigInteger... values) {
        return fetch(NftCollection.NFT_COLLECTION.MAX, values);
    }

    /**
     * Fetch records that have <code>minted BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.katbrew.entities.jooq.db.tables.pojos.NftCollection> fetchRangeOfMinted(BigInteger lowerInclusive, BigInteger upperInclusive) {
        return fetchRange(NftCollection.NFT_COLLECTION.MINTED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>minted IN (values)</code>
     */
    public List<com.katbrew.entities.jooq.db.tables.pojos.NftCollection> fetchByMinted(BigInteger... values) {
        return fetch(NftCollection.NFT_COLLECTION.MINTED, values);
    }

    /**
     * Fetch records that have <code>premint BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.katbrew.entities.jooq.db.tables.pojos.NftCollection> fetchRangeOfPremint(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(NftCollection.NFT_COLLECTION.PREMINT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>premint IN (values)</code>
     */
    public List<com.katbrew.entities.jooq.db.tables.pojos.NftCollection> fetchByPremint(Integer... values) {
        return fetch(NftCollection.NFT_COLLECTION.PREMINT, values);
    }

    /**
     * Fetch records that have <code>daa_mint_start BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.katbrew.entities.jooq.db.tables.pojos.NftCollection> fetchRangeOfDaaMintStart(BigInteger lowerInclusive, BigInteger upperInclusive) {
        return fetchRange(NftCollection.NFT_COLLECTION.DAA_MINT_START, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>daa_mint_start IN (values)</code>
     */
    public List<com.katbrew.entities.jooq.db.tables.pojos.NftCollection> fetchByDaaMintStart(BigInteger... values) {
        return fetch(NftCollection.NFT_COLLECTION.DAA_MINT_START, values);
    }

    /**
     * Fetch records that have <code>mts_add BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.katbrew.entities.jooq.db.tables.pojos.NftCollection> fetchRangeOfMtsAdd(BigInteger lowerInclusive, BigInteger upperInclusive) {
        return fetchRange(NftCollection.NFT_COLLECTION.MTS_ADD, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>mts_add IN (values)</code>
     */
    public List<com.katbrew.entities.jooq.db.tables.pojos.NftCollection> fetchByMtsAdd(BigInteger... values) {
        return fetch(NftCollection.NFT_COLLECTION.MTS_ADD, values);
    }

    /**
     * Fetch records that have <code>op_score_add BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.katbrew.entities.jooq.db.tables.pojos.NftCollection> fetchRangeOfOpScoreAdd(BigInteger lowerInclusive, BigInteger upperInclusive) {
        return fetchRange(NftCollection.NFT_COLLECTION.OP_SCORE_ADD, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>op_score_add IN (values)</code>
     */
    public List<com.katbrew.entities.jooq.db.tables.pojos.NftCollection> fetchByOpScoreAdd(BigInteger... values) {
        return fetch(NftCollection.NFT_COLLECTION.OP_SCORE_ADD, values);
    }

    /**
     * Fetch records that have <code>op_score_mod BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.katbrew.entities.jooq.db.tables.pojos.NftCollection> fetchRangeOfOpScoreMod(BigInteger lowerInclusive, BigInteger upperInclusive) {
        return fetchRange(NftCollection.NFT_COLLECTION.OP_SCORE_MOD, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>op_score_mod IN (values)</code>
     */
    public List<com.katbrew.entities.jooq.db.tables.pojos.NftCollection> fetchByOpScoreMod(BigInteger... values) {
        return fetch(NftCollection.NFT_COLLECTION.OP_SCORE_MOD, values);
    }

    /**
     * Fetch records that have <code>royalty_fee BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.katbrew.entities.jooq.db.tables.pojos.NftCollection> fetchRangeOfRoyaltyFee(BigInteger lowerInclusive, BigInteger upperInclusive) {
        return fetchRange(NftCollection.NFT_COLLECTION.ROYALTY_FEE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>royalty_fee IN (values)</code>
     */
    public List<com.katbrew.entities.jooq.db.tables.pojos.NftCollection> fetchByRoyaltyFee(BigInteger... values) {
        return fetch(NftCollection.NFT_COLLECTION.ROYALTY_FEE, values);
    }

    /**
     * Fetch records that have <code>completed BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.katbrew.entities.jooq.db.tables.pojos.NftCollection> fetchRangeOfCompleted(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(NftCollection.NFT_COLLECTION.COMPLETED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>completed IN (values)</code>
     */
    public List<com.katbrew.entities.jooq.db.tables.pojos.NftCollection> fetchByCompleted(Boolean... values) {
        return fetch(NftCollection.NFT_COLLECTION.COMPLETED, values);
    }
}
