/*
 * This file is generated by jOOQ.
 */
package com.katbrew.entities.jooq.db.tables.daos;


import com.katbrew.entities.jooq.db.tables.TopHolder;
import com.katbrew.entities.jooq.db.tables.records.TopHolderRecord;

import java.math.BigInteger;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.AutoConverter;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TopHolderDao extends DAOImpl<TopHolderRecord, com.katbrew.entities.jooq.db.tables.pojos.TopHolder, BigInteger> {

    /**
     * Create a new TopHolderDao without any configuration
     */
    public TopHolderDao() {
        super(TopHolder.TOP_HOLDER, com.katbrew.entities.jooq.db.tables.pojos.TopHolder.class);
    }

    /**
     * Create a new TopHolderDao with an attached configuration
     */
    public TopHolderDao(Configuration configuration) {
        super(TopHolder.TOP_HOLDER, com.katbrew.entities.jooq.db.tables.pojos.TopHolder.class, configuration);
    }

    @Override
    public BigInteger getId(com.katbrew.entities.jooq.db.tables.pojos.TopHolder object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.katbrew.entities.jooq.db.tables.pojos.TopHolder> fetchRangeOfId(BigInteger lowerInclusive, BigInteger upperInclusive) {
        return fetchRange(TopHolder.TOP_HOLDER.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.katbrew.entities.jooq.db.tables.pojos.TopHolder> fetchById(BigInteger... values) {
        return fetch(TopHolder.TOP_HOLDER.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.katbrew.entities.jooq.db.tables.pojos.TopHolder fetchOneById(BigInteger value) {
        return fetchOne(TopHolder.TOP_HOLDER.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<com.katbrew.entities.jooq.db.tables.pojos.TopHolder> fetchOptionalById(BigInteger value) {
        return fetchOptional(TopHolder.TOP_HOLDER.ID, value);
    }

    /**
     * Fetch records that have <code>address BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.katbrew.entities.jooq.db.tables.pojos.TopHolder> fetchRangeOfAddress(String lowerInclusive, String upperInclusive) {
        return fetchRange(TopHolder.TOP_HOLDER.ADDRESS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>address IN (values)</code>
     */
    public List<com.katbrew.entities.jooq.db.tables.pojos.TopHolder> fetchByAddress(String... values) {
        return fetch(TopHolder.TOP_HOLDER.ADDRESS, values);
    }

    /**
     * Fetch records that have <code>token_count BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.katbrew.entities.jooq.db.tables.pojos.TopHolder> fetchRangeOfTokenCount(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(TopHolder.TOP_HOLDER.TOKEN_COUNT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>token_count IN (values)</code>
     */
    public List<com.katbrew.entities.jooq.db.tables.pojos.TopHolder> fetchByTokenCount(Integer... values) {
        return fetch(TopHolder.TOP_HOLDER.TOKEN_COUNT, values);
    }

    /**
     * Fetch records that have <code>balances BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.katbrew.entities.jooq.db.tables.pojos.TopHolder> fetchRangeOfBalances(String lowerInclusive, String upperInclusive) {
        return fetchRange(TopHolder.TOP_HOLDER.BALANCES, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>balances IN (values)</code>
     */
    public List<com.katbrew.entities.jooq.db.tables.pojos.TopHolder> fetchByBalances(String... values) {
        return fetch(TopHolder.TOP_HOLDER.BALANCES, values);
    }
}
