/*
 * This file is generated by jOOQ.
 */
package com.katbrew.entities.jooq.db.tables;


import com.katbrew.entities.jooq.db.Indexes;
import com.katbrew.entities.jooq.db.Keys;
import com.katbrew.entities.jooq.db.Public;
import com.katbrew.entities.jooq.db.tables.Holder.HolderPath;
import com.katbrew.entities.jooq.db.tables.NftCollection.NftCollectionPath;
import com.katbrew.entities.jooq.db.tables.records.NftTransactionRecord;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.AutoConverter;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class NftTransaction extends TableImpl<NftTransactionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.nft_transaction</code>
     */
    public static final NftTransaction NFT_TRANSACTION = new NftTransaction();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NftTransactionRecord> getRecordType() {
        return NftTransactionRecord.class;
    }

    /**
     * The column <code>public.nft_transaction.id</code>.
     */
    public final TableField<NftTransactionRecord, BigInteger> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "", new AutoConverter<Long, BigInteger>(Long.class, BigInteger.class));

    /**
     * The column <code>public.nft_transaction.p</code>.
     */
    public final TableField<NftTransactionRecord, String> P = createField(DSL.name("p"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.nft_transaction.op</code>.
     */
    public final TableField<NftTransactionRecord, String> OP = createField(DSL.name("op"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.nft_transaction.deployer</code>.
     */
    public final TableField<NftTransactionRecord, BigInteger> DEPLOYER = createField(DSL.name("deployer"), SQLDataType.BIGINT.nullable(false), this, "", new AutoConverter<Long, BigInteger>(Long.class, BigInteger.class));

    /**
     * The column <code>public.nft_transaction.to_address</code>.
     */
    public final TableField<NftTransactionRecord, BigInteger> TO_ADDRESS = createField(DSL.name("to_address"), SQLDataType.BIGINT, this, "", new AutoConverter<Long, BigInteger>(Long.class, BigInteger.class));

    /**
     * The column <code>public.nft_transaction.fk_nft_collection</code>.
     */
    public final TableField<NftTransactionRecord, BigInteger> FK_NFT_COLLECTION = createField(DSL.name("fk_nft_collection"), SQLDataType.BIGINT, this, "", new AutoConverter<Long, BigInteger>(Long.class, BigInteger.class));

    /**
     * The column <code>public.nft_transaction.transaction_tick</code>.
     */
    public final TableField<NftTransactionRecord, String> TRANSACTION_TICK = createField(DSL.name("transaction_tick"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.nft_transaction.op_data</code>.
     */
    public final TableField<NftTransactionRecord, String> OP_DATA = createField(DSL.name("op_data"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.nft_transaction.op_score</code>.
     */
    public final TableField<NftTransactionRecord, BigInteger> OP_SCORE = createField(DSL.name("op_score"), SQLDataType.CLOB, this, "", new AutoConverter<String, BigInteger>(String.class, BigInteger.class));

    /**
     * The column <code>public.nft_transaction.tx_id_rev</code>.
     */
    public final TableField<NftTransactionRecord, String> TX_ID_REV = createField(DSL.name("tx_id_rev"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.nft_transaction.op_error</code>.
     */
    public final TableField<NftTransactionRecord, String> OP_ERROR = createField(DSL.name("op_error"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.nft_transaction.mts_add</code>.
     */
    public final TableField<NftTransactionRecord, BigInteger> MTS_ADD = createField(DSL.name("mts_add"), SQLDataType.BIGINT, this, "", new AutoConverter<Long, BigInteger>(Long.class, BigInteger.class));

    /**
     * The column <code>public.nft_transaction.fee_rev</code>.
     */
    public final TableField<NftTransactionRecord, String> FEE_REV = createField(DSL.name("fee_rev"), SQLDataType.CLOB, this, "");

    private NftTransaction(Name alias, Table<NftTransactionRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private NftTransaction(Name alias, Table<NftTransactionRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.nft_transaction</code> table reference
     */
    public NftTransaction(String alias) {
        this(DSL.name(alias), NFT_TRANSACTION);
    }

    /**
     * Create an aliased <code>public.nft_transaction</code> table reference
     */
    public NftTransaction(Name alias) {
        this(alias, NFT_TRANSACTION);
    }

    /**
     * Create a <code>public.nft_transaction</code> table reference
     */
    public NftTransaction() {
        this(DSL.name("nft_transaction"), null);
    }

    public <O extends Record> NftTransaction(Table<O> path, ForeignKey<O, NftTransactionRecord> childPath, InverseForeignKey<O, NftTransactionRecord> parentPath) {
        super(path, childPath, parentPath, NFT_TRANSACTION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class NftTransactionPath extends NftTransaction implements Path<NftTransactionRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> NftTransactionPath(Table<O> path, ForeignKey<O, NftTransactionRecord> childPath, InverseForeignKey<O, NftTransactionRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private NftTransactionPath(Name alias, Table<NftTransactionRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public NftTransactionPath as(String alias) {
            return new NftTransactionPath(DSL.name(alias), this);
        }

        @Override
        public NftTransactionPath as(Name alias) {
            return new NftTransactionPath(alias, this);
        }

        @Override
        public NftTransactionPath as(Table<?> alias) {
            return new NftTransactionPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.NFT_TRANSACTION_FK_INDEX, Indexes.NFT_TRANSACTION_INDEX_OP_SCORE);
    }

    @Override
    public Identity<NftTransactionRecord, BigInteger> getIdentity() {
        return (Identity<NftTransactionRecord, BigInteger>) super.getIdentity();
    }

    @Override
    public UniqueKey<NftTransactionRecord> getPrimaryKey() {
        return Keys.PK_NFT_TRANSACTION;
    }

    @Override
    public List<UniqueKey<NftTransactionRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.NFT_TRANSACTION_TX_ID_REV_KEY);
    }

    @Override
    public List<ForeignKey<NftTransactionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.NFT_TRANSACTION__FK_NFT_TRANSACTION_HOLDER_DEPLOYER, Keys.NFT_TRANSACTION__FK_NFT_TRANSACTION_HOLDER_TO, Keys.NFT_TRANSACTION__FK_NFT_TRANSACTION_NFT_COLLECTION);
    }

    private transient HolderPath _fkNftTransactionHolderDeployer;

    /**
     * Get the implicit join path to the <code>public.Holder</code> table, via
     * the <code>fk_nft_transaction_holder_deployer</code> key.
     */
    public HolderPath fkNftTransactionHolderDeployer() {
        if (_fkNftTransactionHolderDeployer == null)
            _fkNftTransactionHolderDeployer = new HolderPath(this, Keys.NFT_TRANSACTION__FK_NFT_TRANSACTION_HOLDER_DEPLOYER, null);

        return _fkNftTransactionHolderDeployer;
    }

    private transient HolderPath _fkNftTransactionHolderTo;

    /**
     * Get the implicit join path to the <code>public.Holder</code> table, via
     * the <code>fk_nft_transaction_holder_to</code> key.
     */
    public HolderPath fkNftTransactionHolderTo() {
        if (_fkNftTransactionHolderTo == null)
            _fkNftTransactionHolderTo = new HolderPath(this, Keys.NFT_TRANSACTION__FK_NFT_TRANSACTION_HOLDER_TO, null);

        return _fkNftTransactionHolderTo;
    }

    private transient NftCollectionPath _nftCollection;

    /**
     * Get the implicit join path to the <code>public.nft_collection</code>
     * table.
     */
    public NftCollectionPath nftCollection() {
        if (_nftCollection == null)
            _nftCollection = new NftCollectionPath(this, Keys.NFT_TRANSACTION__FK_NFT_TRANSACTION_NFT_COLLECTION, null);

        return _nftCollection;
    }

    @Override
    public NftTransaction as(String alias) {
        return new NftTransaction(DSL.name(alias), this);
    }

    @Override
    public NftTransaction as(Name alias) {
        return new NftTransaction(alias, this);
    }

    @Override
    public NftTransaction as(Table<?> alias) {
        return new NftTransaction(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public NftTransaction rename(String name) {
        return new NftTransaction(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NftTransaction rename(Name name) {
        return new NftTransaction(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public NftTransaction rename(Table<?> name) {
        return new NftTransaction(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NftTransaction where(Condition condition) {
        return new NftTransaction(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NftTransaction where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NftTransaction where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NftTransaction where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NftTransaction where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NftTransaction where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NftTransaction where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NftTransaction where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NftTransaction whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NftTransaction whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
