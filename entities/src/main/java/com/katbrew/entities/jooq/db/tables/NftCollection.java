/*
 * This file is generated by jOOQ.
 */
package com.katbrew.entities.jooq.db.tables;


import com.katbrew.entities.jooq.db.Indexes;
import com.katbrew.entities.jooq.db.Keys;
import com.katbrew.entities.jooq.db.Public;
import com.katbrew.entities.jooq.db.tables.NftCollectionEntry.NftCollectionEntryPath;
import com.katbrew.entities.jooq.db.tables.NftCollectionInfo.NftCollectionInfoPath;
import com.katbrew.entities.jooq.db.tables.records.NftCollectionRecord;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.AutoConverter;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NftCollection extends TableImpl<NftCollectionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.nft_collection</code>
     */
    public static final NftCollection NFT_COLLECTION = new NftCollection();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NftCollectionRecord> getRecordType() {
        return NftCollectionRecord.class;
    }

    /**
     * The column <code>public.nft_collection.id</code>.
     */
    public final TableField<NftCollectionRecord, BigInteger> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "", new AutoConverter<Long, BigInteger>(Long.class, BigInteger.class));

    /**
     * The column <code>public.nft_collection.tick</code>.
     */
    public final TableField<NftCollectionRecord, String> TICK = createField(DSL.name("tick"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.nft_collection.deployer</code>.
     */
    public final TableField<NftCollectionRecord, String> DEPLOYER = createField(DSL.name("deployer"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.nft_collection.buri</code>.
     */
    public final TableField<NftCollectionRecord, String> BURI = createField(DSL.name("buri"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.nft_collection.tx_id_rev</code>.
     */
    public final TableField<NftCollectionRecord, String> TX_ID_REV = createField(DSL.name("tx_id_rev"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.nft_collection.state</code>.
     */
    public final TableField<NftCollectionRecord, String> STATE = createField(DSL.name("state"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.nft_collection.max</code>.
     */
    public final TableField<NftCollectionRecord, BigInteger> MAX = createField(DSL.name("max"), SQLDataType.INTEGER, this, "", new AutoConverter<Integer, BigInteger>(Integer.class, BigInteger.class));

    /**
     * The column <code>public.nft_collection.minted</code>.
     */
    public final TableField<NftCollectionRecord, BigInteger> MINTED = createField(DSL.name("minted"), SQLDataType.INTEGER, this, "", new AutoConverter<Integer, BigInteger>(Integer.class, BigInteger.class));

    /**
     * The column <code>public.nft_collection.premint</code>.
     */
    public final TableField<NftCollectionRecord, Integer> PREMINT = createField(DSL.name("premint"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.nft_collection.daa_mint_start</code>.
     */
    public final TableField<NftCollectionRecord, BigInteger> DAA_MINT_START = createField(DSL.name("daa_mint_start"), SQLDataType.BIGINT, this, "", new AutoConverter<Long, BigInteger>(Long.class, BigInteger.class));

    /**
     * The column <code>public.nft_collection.mts_add</code>.
     */
    public final TableField<NftCollectionRecord, BigInteger> MTS_ADD = createField(DSL.name("mts_add"), SQLDataType.CLOB, this, "", new AutoConverter<String, BigInteger>(String.class, BigInteger.class));

    /**
     * The column <code>public.nft_collection.op_score_add</code>.
     */
    public final TableField<NftCollectionRecord, BigInteger> OP_SCORE_ADD = createField(DSL.name("op_score_add"), SQLDataType.CLOB, this, "", new AutoConverter<String, BigInteger>(String.class, BigInteger.class));

    /**
     * The column <code>public.nft_collection.op_score_mod</code>.
     */
    public final TableField<NftCollectionRecord, BigInteger> OP_SCORE_MOD = createField(DSL.name("op_score_mod"), SQLDataType.CLOB, this, "", new AutoConverter<String, BigInteger>(String.class, BigInteger.class));

    /**
     * The column <code>public.nft_collection.royalty_fee</code>.
     */
    public final TableField<NftCollectionRecord, BigInteger> ROYALTY_FEE = createField(DSL.name("royalty_fee"), SQLDataType.CLOB, this, "", new AutoConverter<String, BigInteger>(String.class, BigInteger.class));

    private NftCollection(Name alias, Table<NftCollectionRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private NftCollection(Name alias, Table<NftCollectionRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.nft_collection</code> table reference
     */
    public NftCollection(String alias) {
        this(DSL.name(alias), NFT_COLLECTION);
    }

    /**
     * Create an aliased <code>public.nft_collection</code> table reference
     */
    public NftCollection(Name alias) {
        this(alias, NFT_COLLECTION);
    }

    /**
     * Create a <code>public.nft_collection</code> table reference
     */
    public NftCollection() {
        this(DSL.name("nft_collection"), null);
    }

    public <O extends Record> NftCollection(Table<O> path, ForeignKey<O, NftCollectionRecord> childPath, InverseForeignKey<O, NftCollectionRecord> parentPath) {
        super(path, childPath, parentPath, NFT_COLLECTION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class NftCollectionPath extends NftCollection implements Path<NftCollectionRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> NftCollectionPath(Table<O> path, ForeignKey<O, NftCollectionRecord> childPath, InverseForeignKey<O, NftCollectionRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private NftCollectionPath(Name alias, Table<NftCollectionRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public NftCollectionPath as(String alias) {
            return new NftCollectionPath(DSL.name(alias), this);
        }

        @Override
        public NftCollectionPath as(Name alias) {
            return new NftCollectionPath(alias, this);
        }

        @Override
        public NftCollectionPath as(Table<?> alias) {
            return new NftCollectionPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.NFT_COLLECTION_TICK_INDEX);
    }

    @Override
    public Identity<NftCollectionRecord, BigInteger> getIdentity() {
        return (Identity<NftCollectionRecord, BigInteger>) super.getIdentity();
    }

    @Override
    public UniqueKey<NftCollectionRecord> getPrimaryKey() {
        return Keys.PK_NFT_COLLECTION;
    }

    @Override
    public List<UniqueKey<NftCollectionRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.NFT_COLLECTION_TICK_KEY, Keys.NFT_COLLECTION_TX_ID_REV_KEY);
    }

    private transient NftCollectionEntryPath _nftCollectionEntry;

    /**
     * Get the implicit to-many join path to the
     * <code>public.nft_collection_entry</code> table
     */
    public NftCollectionEntryPath nftCollectionEntry() {
        if (_nftCollectionEntry == null)
            _nftCollectionEntry = new NftCollectionEntryPath(this, null, Keys.NFT_COLLECTION_ENTRY__FK_COLLECTION_ENTRY_COLLECTION.getInverseKey());

        return _nftCollectionEntry;
    }

    private transient NftCollectionInfoPath _nftCollectionInfo;

    /**
     * Get the implicit to-many join path to the
     * <code>public.nft_collection_info</code> table
     */
    public NftCollectionInfoPath nftCollectionInfo() {
        if (_nftCollectionInfo == null)
            _nftCollectionInfo = new NftCollectionInfoPath(this, null, Keys.NFT_COLLECTION_INFO__FK_COLLECTION_INFO_COLLECTION.getInverseKey());

        return _nftCollectionInfo;
    }

    @Override
    public NftCollection as(String alias) {
        return new NftCollection(DSL.name(alias), this);
    }

    @Override
    public NftCollection as(Name alias) {
        return new NftCollection(alias, this);
    }

    @Override
    public NftCollection as(Table<?> alias) {
        return new NftCollection(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public NftCollection rename(String name) {
        return new NftCollection(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NftCollection rename(Name name) {
        return new NftCollection(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public NftCollection rename(Table<?> name) {
        return new NftCollection(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NftCollection where(Condition condition) {
        return new NftCollection(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NftCollection where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NftCollection where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NftCollection where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NftCollection where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NftCollection where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NftCollection where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NftCollection where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NftCollection whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NftCollection whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
