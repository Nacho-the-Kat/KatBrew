/*
 * This file is generated by jOOQ.
 */
package com.katbrew.entities.jooq.db.tables;


import com.katbrew.entities.jooq.db.Keys;
import com.katbrew.entities.jooq.db.Public;
import com.katbrew.entities.jooq.db.tables.records.WhitelistRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Whitelist extends TableImpl<WhitelistRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.Whitelist</code>
     */
    public static final Whitelist WHITELIST = new Whitelist();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WhitelistRecord> getRecordType() {
        return WhitelistRecord.class;
    }

    /**
     * The column <code>public.Whitelist.id</code>.
     */
    public final TableField<WhitelistRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.Whitelist.address</code>.
     */
    public final TableField<WhitelistRecord, String> ADDRESS = createField(DSL.name("address"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.Whitelist.updated_by</code>.
     */
    public final TableField<WhitelistRecord, Integer> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.Whitelist.updated_at</code>.
     */
    public final TableField<WhitelistRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.Whitelist.previousAddress</code>.
     */
    public final TableField<WhitelistRecord, String> PREVIOUSADDRESS = createField(DSL.name("previousAddress"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.Whitelist.signature</code>.
     */
    public final TableField<WhitelistRecord, String> SIGNATURE = createField(DSL.name("signature"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.Whitelist.active</code>.
     */
    public final TableField<WhitelistRecord, Boolean> ACTIVE = createField(DSL.name("active"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("true"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.Whitelist.change_type</code>.
     */
    public final TableField<WhitelistRecord, String> CHANGE_TYPE = createField(DSL.name("change_type"), SQLDataType.CLOB, this, "");

    private Whitelist(Name alias, Table<WhitelistRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Whitelist(Name alias, Table<WhitelistRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.Whitelist</code> table reference
     */
    public Whitelist(String alias) {
        this(DSL.name(alias), WHITELIST);
    }

    /**
     * Create an aliased <code>public.Whitelist</code> table reference
     */
    public Whitelist(Name alias) {
        this(alias, WHITELIST);
    }

    /**
     * Create a <code>public.Whitelist</code> table reference
     */
    public Whitelist() {
        this(DSL.name("Whitelist"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<WhitelistRecord, Integer> getIdentity() {
        return (Identity<WhitelistRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<WhitelistRecord> getPrimaryKey() {
        return Keys.PK_WHITELIST;
    }

    @Override
    public List<UniqueKey<WhitelistRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.WHITELIST_ADDRESS_KEY);
    }

    @Override
    public Whitelist as(String alias) {
        return new Whitelist(DSL.name(alias), this);
    }

    @Override
    public Whitelist as(Name alias) {
        return new Whitelist(alias, this);
    }

    @Override
    public Whitelist as(Table<?> alias) {
        return new Whitelist(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Whitelist rename(String name) {
        return new Whitelist(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Whitelist rename(Name name) {
        return new Whitelist(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Whitelist rename(Table<?> name) {
        return new Whitelist(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Whitelist where(Condition condition) {
        return new Whitelist(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Whitelist where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Whitelist where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Whitelist where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Whitelist where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Whitelist where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Whitelist where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Whitelist where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Whitelist whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Whitelist whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
