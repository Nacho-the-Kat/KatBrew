/*
 * This file is generated by jOOQ.
 */
package com.katbrew.entities.jooq.db.tables.pojos;


import com.katbrew.entities.jooq.db.tables.interfaces.INftTransaction;

import java.math.BigInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class NftTransaction implements INftTransaction {

    private static final long serialVersionUID = 1L;

    private BigInteger id;
    private String p;
    private String op;
    private BigInteger deployer;
    private BigInteger toAddress;
    private BigInteger fkNftCollection;
    private String transactionTick;
    private String opData;
    private BigInteger opScore;
    private String txIdRev;
    private String opError;
    private BigInteger mtsAdd;
    private String feeRev;

    public NftTransaction() {}

    public NftTransaction(INftTransaction value) {
        this.id = value.getId();
        this.p = value.getP();
        this.op = value.getOp();
        this.deployer = value.getDeployer();
        this.toAddress = value.getToAddress();
        this.fkNftCollection = value.getFkNftCollection();
        this.transactionTick = value.getTransactionTick();
        this.opData = value.getOpData();
        this.opScore = value.getOpScore();
        this.txIdRev = value.getTxIdRev();
        this.opError = value.getOpError();
        this.mtsAdd = value.getMtsAdd();
        this.feeRev = value.getFeeRev();
    }

    public NftTransaction(
        BigInteger id,
        String p,
        String op,
        BigInteger deployer,
        BigInteger toAddress,
        BigInteger fkNftCollection,
        String transactionTick,
        String opData,
        BigInteger opScore,
        String txIdRev,
        String opError,
        BigInteger mtsAdd,
        String feeRev
    ) {
        this.id = id;
        this.p = p;
        this.op = op;
        this.deployer = deployer;
        this.toAddress = toAddress;
        this.fkNftCollection = fkNftCollection;
        this.transactionTick = transactionTick;
        this.opData = opData;
        this.opScore = opScore;
        this.txIdRev = txIdRev;
        this.opError = opError;
        this.mtsAdd = mtsAdd;
        this.feeRev = feeRev;
    }

    /**
     * Getter for <code>public.nft_transaction.id</code>.
     */
    @Override
    public BigInteger getId() {
        return this.id;
    }

    /**
     * Setter for <code>public.nft_transaction.id</code>.
     */
    @Override
    public void setId(BigInteger id) {
        this.id = id;
    }

    /**
     * Getter for <code>public.nft_transaction.p</code>.
     */
    @Override
    public String getP() {
        return this.p;
    }

    /**
     * Setter for <code>public.nft_transaction.p</code>.
     */
    @Override
    public void setP(String p) {
        this.p = p;
    }

    /**
     * Getter for <code>public.nft_transaction.op</code>.
     */
    @Override
    public String getOp() {
        return this.op;
    }

    /**
     * Setter for <code>public.nft_transaction.op</code>.
     */
    @Override
    public void setOp(String op) {
        this.op = op;
    }

    /**
     * Getter for <code>public.nft_transaction.deployer</code>.
     */
    @Override
    public BigInteger getDeployer() {
        return this.deployer;
    }

    /**
     * Setter for <code>public.nft_transaction.deployer</code>.
     */
    @Override
    public void setDeployer(BigInteger deployer) {
        this.deployer = deployer;
    }

    /**
     * Getter for <code>public.nft_transaction.to_address</code>.
     */
    @Override
    public BigInteger getToAddress() {
        return this.toAddress;
    }

    /**
     * Setter for <code>public.nft_transaction.to_address</code>.
     */
    @Override
    public void setToAddress(BigInteger toAddress) {
        this.toAddress = toAddress;
    }

    /**
     * Getter for <code>public.nft_transaction.fk_nft_collection</code>.
     */
    @Override
    public BigInteger getFkNftCollection() {
        return this.fkNftCollection;
    }

    /**
     * Setter for <code>public.nft_transaction.fk_nft_collection</code>.
     */
    @Override
    public void setFkNftCollection(BigInteger fkNftCollection) {
        this.fkNftCollection = fkNftCollection;
    }

    /**
     * Getter for <code>public.nft_transaction.transaction_tick</code>.
     */
    @Override
    public String getTransactionTick() {
        return this.transactionTick;
    }

    /**
     * Setter for <code>public.nft_transaction.transaction_tick</code>.
     */
    @Override
    public void setTransactionTick(String transactionTick) {
        this.transactionTick = transactionTick;
    }

    /**
     * Getter for <code>public.nft_transaction.op_data</code>.
     */
    @Override
    public String getOpData() {
        return this.opData;
    }

    /**
     * Setter for <code>public.nft_transaction.op_data</code>.
     */
    @Override
    public void setOpData(String opData) {
        this.opData = opData;
    }

    /**
     * Getter for <code>public.nft_transaction.op_score</code>.
     */
    @Override
    public BigInteger getOpScore() {
        return this.opScore;
    }

    /**
     * Setter for <code>public.nft_transaction.op_score</code>.
     */
    @Override
    public void setOpScore(BigInteger opScore) {
        this.opScore = opScore;
    }

    /**
     * Getter for <code>public.nft_transaction.tx_id_rev</code>.
     */
    @Override
    public String getTxIdRev() {
        return this.txIdRev;
    }

    /**
     * Setter for <code>public.nft_transaction.tx_id_rev</code>.
     */
    @Override
    public void setTxIdRev(String txIdRev) {
        this.txIdRev = txIdRev;
    }

    /**
     * Getter for <code>public.nft_transaction.op_error</code>.
     */
    @Override
    public String getOpError() {
        return this.opError;
    }

    /**
     * Setter for <code>public.nft_transaction.op_error</code>.
     */
    @Override
    public void setOpError(String opError) {
        this.opError = opError;
    }

    /**
     * Getter for <code>public.nft_transaction.mts_add</code>.
     */
    @Override
    public BigInteger getMtsAdd() {
        return this.mtsAdd;
    }

    /**
     * Setter for <code>public.nft_transaction.mts_add</code>.
     */
    @Override
    public void setMtsAdd(BigInteger mtsAdd) {
        this.mtsAdd = mtsAdd;
    }

    /**
     * Getter for <code>public.nft_transaction.fee_rev</code>.
     */
    @Override
    public String getFeeRev() {
        return this.feeRev;
    }

    /**
     * Setter for <code>public.nft_transaction.fee_rev</code>.
     */
    @Override
    public void setFeeRev(String feeRev) {
        this.feeRev = feeRev;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final NftTransaction other = (NftTransaction) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.p == null) {
            if (other.p != null)
                return false;
        }
        else if (!this.p.equals(other.p))
            return false;
        if (this.op == null) {
            if (other.op != null)
                return false;
        }
        else if (!this.op.equals(other.op))
            return false;
        if (this.deployer == null) {
            if (other.deployer != null)
                return false;
        }
        else if (!this.deployer.equals(other.deployer))
            return false;
        if (this.toAddress == null) {
            if (other.toAddress != null)
                return false;
        }
        else if (!this.toAddress.equals(other.toAddress))
            return false;
        if (this.fkNftCollection == null) {
            if (other.fkNftCollection != null)
                return false;
        }
        else if (!this.fkNftCollection.equals(other.fkNftCollection))
            return false;
        if (this.transactionTick == null) {
            if (other.transactionTick != null)
                return false;
        }
        else if (!this.transactionTick.equals(other.transactionTick))
            return false;
        if (this.opData == null) {
            if (other.opData != null)
                return false;
        }
        else if (!this.opData.equals(other.opData))
            return false;
        if (this.opScore == null) {
            if (other.opScore != null)
                return false;
        }
        else if (!this.opScore.equals(other.opScore))
            return false;
        if (this.txIdRev == null) {
            if (other.txIdRev != null)
                return false;
        }
        else if (!this.txIdRev.equals(other.txIdRev))
            return false;
        if (this.opError == null) {
            if (other.opError != null)
                return false;
        }
        else if (!this.opError.equals(other.opError))
            return false;
        if (this.mtsAdd == null) {
            if (other.mtsAdd != null)
                return false;
        }
        else if (!this.mtsAdd.equals(other.mtsAdd))
            return false;
        if (this.feeRev == null) {
            if (other.feeRev != null)
                return false;
        }
        else if (!this.feeRev.equals(other.feeRev))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.p == null) ? 0 : this.p.hashCode());
        result = prime * result + ((this.op == null) ? 0 : this.op.hashCode());
        result = prime * result + ((this.deployer == null) ? 0 : this.deployer.hashCode());
        result = prime * result + ((this.toAddress == null) ? 0 : this.toAddress.hashCode());
        result = prime * result + ((this.fkNftCollection == null) ? 0 : this.fkNftCollection.hashCode());
        result = prime * result + ((this.transactionTick == null) ? 0 : this.transactionTick.hashCode());
        result = prime * result + ((this.opData == null) ? 0 : this.opData.hashCode());
        result = prime * result + ((this.opScore == null) ? 0 : this.opScore.hashCode());
        result = prime * result + ((this.txIdRev == null) ? 0 : this.txIdRev.hashCode());
        result = prime * result + ((this.opError == null) ? 0 : this.opError.hashCode());
        result = prime * result + ((this.mtsAdd == null) ? 0 : this.mtsAdd.hashCode());
        result = prime * result + ((this.feeRev == null) ? 0 : this.feeRev.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("NftTransaction (");

        sb.append(id);
        sb.append(", ").append(p);
        sb.append(", ").append(op);
        sb.append(", ").append(deployer);
        sb.append(", ").append(toAddress);
        sb.append(", ").append(fkNftCollection);
        sb.append(", ").append(transactionTick);
        sb.append(", ").append(opData);
        sb.append(", ").append(opScore);
        sb.append(", ").append(txIdRev);
        sb.append(", ").append(opError);
        sb.append(", ").append(mtsAdd);
        sb.append(", ").append(feeRev);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(INftTransaction from) {
        setId(from.getId());
        setP(from.getP());
        setOp(from.getOp());
        setDeployer(from.getDeployer());
        setToAddress(from.getToAddress());
        setFkNftCollection(from.getFkNftCollection());
        setTransactionTick(from.getTransactionTick());
        setOpData(from.getOpData());
        setOpScore(from.getOpScore());
        setTxIdRev(from.getTxIdRev());
        setOpError(from.getOpError());
        setMtsAdd(from.getMtsAdd());
        setFeeRev(from.getFeeRev());
    }

    @Override
    public <E extends INftTransaction> E into(E into) {
        into.from(this);
        return into;
    }
}
