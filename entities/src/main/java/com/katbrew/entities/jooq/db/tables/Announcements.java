/*
 * This file is generated by jOOQ.
 */
package com.katbrew.entities.jooq.db.tables;


import com.katbrew.entities.jooq.db.Keys;
import com.katbrew.entities.jooq.db.Public;
import com.katbrew.entities.jooq.db.tables.records.AnnouncementsRecord;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Announcements extends TableImpl<AnnouncementsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.Announcements</code>
     */
    public static final Announcements ANNOUNCEMENTS = new Announcements();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AnnouncementsRecord> getRecordType() {
        return AnnouncementsRecord.class;
    }

    /**
     * The column <code>public.Announcements.id</code>.
     */
    public final TableField<AnnouncementsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.Announcements.title</code>.
     */
    public final TableField<AnnouncementsRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.Announcements.text</code>.
     */
    public final TableField<AnnouncementsRecord, String> TEXT = createField(DSL.name("text"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.Announcements.image_url</code>.
     */
    public final TableField<AnnouncementsRecord, String> IMAGE_URL = createField(DSL.name("image_url"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.Announcements.link</code>.
     */
    public final TableField<AnnouncementsRecord, String> LINK = createField(DSL.name("link"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.Announcements.timestamp</code>.
     */
    public final TableField<AnnouncementsRecord, LocalDateTime> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "");

    private Announcements(Name alias, Table<AnnouncementsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Announcements(Name alias, Table<AnnouncementsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.Announcements</code> table reference
     */
    public Announcements(String alias) {
        this(DSL.name(alias), ANNOUNCEMENTS);
    }

    /**
     * Create an aliased <code>public.Announcements</code> table reference
     */
    public Announcements(Name alias) {
        this(alias, ANNOUNCEMENTS);
    }

    /**
     * Create a <code>public.Announcements</code> table reference
     */
    public Announcements() {
        this(DSL.name("Announcements"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<AnnouncementsRecord, Integer> getIdentity() {
        return (Identity<AnnouncementsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<AnnouncementsRecord> getPrimaryKey() {
        return Keys.PK_ANNOUNCEMENTS;
    }

    @Override
    public Announcements as(String alias) {
        return new Announcements(DSL.name(alias), this);
    }

    @Override
    public Announcements as(Name alias) {
        return new Announcements(alias, this);
    }

    @Override
    public Announcements as(Table<?> alias) {
        return new Announcements(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Announcements rename(String name) {
        return new Announcements(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Announcements rename(Name name) {
        return new Announcements(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Announcements rename(Table<?> name) {
        return new Announcements(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Announcements where(Condition condition) {
        return new Announcements(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Announcements where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Announcements where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Announcements where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Announcements where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Announcements where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Announcements where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Announcements where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Announcements whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Announcements whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
