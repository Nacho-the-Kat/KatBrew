/*
 * This file is generated by jOOQ.
 */
package com.katbrew.entities.jooq.db.tables;


import com.katbrew.entities.jooq.db.Keys;
import com.katbrew.entities.jooq.db.Public;
import com.katbrew.entities.jooq.db.tables.Holder.HolderPath;
import com.katbrew.entities.jooq.db.tables.NftCollectionEntry.NftCollectionEntryPath;
import com.katbrew.entities.jooq.db.tables.records.NftBalanceRecord;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.AutoConverter;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NftBalance extends TableImpl<NftBalanceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.nft_balance</code>
     */
    public static final NftBalance NFT_BALANCE = new NftBalance();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NftBalanceRecord> getRecordType() {
        return NftBalanceRecord.class;
    }

    /**
     * The column <code>public.nft_balance.id</code>.
     */
    public final TableField<NftBalanceRecord, BigInteger> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "", new AutoConverter<Long, BigInteger>(Long.class, BigInteger.class));

    /**
     * The column <code>public.nft_balance.holder_id</code>.
     */
    public final TableField<NftBalanceRecord, BigInteger> HOLDER_ID = createField(DSL.name("holder_id"), SQLDataType.BIGINT.nullable(false), this, "", new AutoConverter<Long, BigInteger>(Long.class, BigInteger.class));

    /**
     * The column <code>public.nft_balance.fk_nft_entry</code>.
     */
    public final TableField<NftBalanceRecord, Integer> FK_NFT_ENTRY = createField(DSL.name("fk_nft_entry"), SQLDataType.INTEGER.nullable(false), this, "");

    private NftBalance(Name alias, Table<NftBalanceRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private NftBalance(Name alias, Table<NftBalanceRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.nft_balance</code> table reference
     */
    public NftBalance(String alias) {
        this(DSL.name(alias), NFT_BALANCE);
    }

    /**
     * Create an aliased <code>public.nft_balance</code> table reference
     */
    public NftBalance(Name alias) {
        this(alias, NFT_BALANCE);
    }

    /**
     * Create a <code>public.nft_balance</code> table reference
     */
    public NftBalance() {
        this(DSL.name("nft_balance"), null);
    }

    public <O extends Record> NftBalance(Table<O> path, ForeignKey<O, NftBalanceRecord> childPath, InverseForeignKey<O, NftBalanceRecord> parentPath) {
        super(path, childPath, parentPath, NFT_BALANCE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class NftBalancePath extends NftBalance implements Path<NftBalanceRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> NftBalancePath(Table<O> path, ForeignKey<O, NftBalanceRecord> childPath, InverseForeignKey<O, NftBalanceRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private NftBalancePath(Name alias, Table<NftBalanceRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public NftBalancePath as(String alias) {
            return new NftBalancePath(DSL.name(alias), this);
        }

        @Override
        public NftBalancePath as(Name alias) {
            return new NftBalancePath(alias, this);
        }

        @Override
        public NftBalancePath as(Table<?> alias) {
            return new NftBalancePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<NftBalanceRecord, BigInteger> getIdentity() {
        return (Identity<NftBalanceRecord, BigInteger>) super.getIdentity();
    }

    @Override
    public UniqueKey<NftBalanceRecord> getPrimaryKey() {
        return Keys.PK_NFT_BALANCE;
    }

    @Override
    public List<ForeignKey<NftBalanceRecord, ?>> getReferences() {
        return Arrays.asList(Keys.NFT_BALANCE__FK_NFT_BALANCE_ENTRY, Keys.NFT_BALANCE__FK_NFT_BALANCE_HOLDER);
    }

    private transient NftCollectionEntryPath _nftCollectionEntry;

    /**
     * Get the implicit join path to the
     * <code>public.nft_collection_entry</code> table.
     */
    public NftCollectionEntryPath nftCollectionEntry() {
        if (_nftCollectionEntry == null)
            _nftCollectionEntry = new NftCollectionEntryPath(this, Keys.NFT_BALANCE__FK_NFT_BALANCE_ENTRY, null);

        return _nftCollectionEntry;
    }

    private transient HolderPath _holder;

    /**
     * Get the implicit join path to the <code>public.Holder</code> table.
     */
    public HolderPath holder() {
        if (_holder == null)
            _holder = new HolderPath(this, Keys.NFT_BALANCE__FK_NFT_BALANCE_HOLDER, null);

        return _holder;
    }

    @Override
    public NftBalance as(String alias) {
        return new NftBalance(DSL.name(alias), this);
    }

    @Override
    public NftBalance as(Name alias) {
        return new NftBalance(alias, this);
    }

    @Override
    public NftBalance as(Table<?> alias) {
        return new NftBalance(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public NftBalance rename(String name) {
        return new NftBalance(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NftBalance rename(Name name) {
        return new NftBalance(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public NftBalance rename(Table<?> name) {
        return new NftBalance(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NftBalance where(Condition condition) {
        return new NftBalance(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NftBalance where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NftBalance where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NftBalance where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NftBalance where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NftBalance where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NftBalance where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NftBalance where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NftBalance whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NftBalance whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
