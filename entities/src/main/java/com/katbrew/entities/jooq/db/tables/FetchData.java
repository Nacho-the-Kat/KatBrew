/*
 * This file is generated by jOOQ.
 */
package com.katbrew.entities.jooq.db.tables;


import com.katbrew.entities.jooq.db.Keys;
import com.katbrew.entities.jooq.db.Public;
import com.katbrew.entities.jooq.db.tables.records.FetchDataRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FetchData extends TableImpl<FetchDataRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.fetch_data</code>
     */
    public static final FetchData FETCH_DATA = new FetchData();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FetchDataRecord> getRecordType() {
        return FetchDataRecord.class;
    }

    /**
     * The column <code>public.fetch_data.id</code>.
     */
    public final TableField<FetchDataRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.fetch_data.identifier</code>.
     */
    public final TableField<FetchDataRecord, String> IDENTIFIER = createField(DSL.name("identifier"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.fetch_data.data</code>.
     */
    public final TableField<FetchDataRecord, String> DATA = createField(DSL.name("data"), SQLDataType.CLOB, this, "");

    private FetchData(Name alias, Table<FetchDataRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private FetchData(Name alias, Table<FetchDataRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.fetch_data</code> table reference
     */
    public FetchData(String alias) {
        this(DSL.name(alias), FETCH_DATA);
    }

    /**
     * Create an aliased <code>public.fetch_data</code> table reference
     */
    public FetchData(Name alias) {
        this(alias, FETCH_DATA);
    }

    /**
     * Create a <code>public.fetch_data</code> table reference
     */
    public FetchData() {
        this(DSL.name("fetch_data"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<FetchDataRecord, Integer> getIdentity() {
        return (Identity<FetchDataRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<FetchDataRecord> getPrimaryKey() {
        return Keys.PK_LAST_UPDATE_DATA;
    }

    @Override
    public List<UniqueKey<FetchDataRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.FETCH_DATA_IDENTIFIER_KEY);
    }

    @Override
    public FetchData as(String alias) {
        return new FetchData(DSL.name(alias), this);
    }

    @Override
    public FetchData as(Name alias) {
        return new FetchData(alias, this);
    }

    @Override
    public FetchData as(Table<?> alias) {
        return new FetchData(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FetchData rename(String name) {
        return new FetchData(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FetchData rename(Name name) {
        return new FetchData(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FetchData rename(Table<?> name) {
        return new FetchData(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FetchData where(Condition condition) {
        return new FetchData(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FetchData where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FetchData where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FetchData where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FetchData where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FetchData where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FetchData where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FetchData where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FetchData whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FetchData whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
